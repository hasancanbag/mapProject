{"ast":null,"code":"/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, XML_SCHEMA_INSTANCE_URI, createElementNS, getAllTextContent, makeArrayExtender, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, parseNode, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { createOrUpdate } from '../extent.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { readNonNegativeIntegerString, writeStringTextNode } from './xsd.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' + '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ = options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ = options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS, node, objectStack, this);\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS, node, objectStack, this);\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop([], this.MULTISURFACE_PARSERS, node, objectStack, this);\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop([null], this.PATCHES_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop([null], this.SURFACE_PARSERS, node, objectStack, this);\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null], this.CURVE_PARSERS, node, objectStack, this);\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null], this.ENVELOPE_PARSERS, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while (m = re.exec(s)) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const axisOrientation = containerSrs ? getProjection(containerSrs).getAxisOrientation() : 'enu';\n    if (axisOrientation === 'neu') {\n      for (let i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    const axisOrientation = containerSrs ? getProjection(containerSrs).getAxisOrientation() : 'enu';\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (/** @type {Element} */node.parentNode.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(/** @type {Element} */node.parentNode.getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    const asXYZ = axisOrientation.startsWith('en');\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (asXYZ) {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    const axisOrientation = srsName ? getProjection(srsName).getAxisOrientation() : 'enu';\n    const point = value.getCoordinates();\n    // only 2d for simple features profile\n    let coords = axisOrientation.startsWith('en') ? point[0] + ' ' + point[1] : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    const axisOrientation = srsName ? getProjection(srsName).getAxisOrientation() : 'enu';\n    let coords = axisOrientation.startsWith('en') ? point[0] + ' ' + point[1] : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: node\n    }, this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */\n    objectStack[objectStack.length - 1];\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(/** @type {import(\"../extent.js\").Extent} */geometry, context);\n    } else {\n      value = transformGeometryWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */geometry, true, context);\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */fid);\n    }\n    const context = /** @type {Object} */objectStack[objectStack.length - 1];\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null && value !== undefined) {\n          keys.push(key);\n          values.push(value);\n          if (key == geometryName || typeof (/** @type {?} */value.getSimplifiedGeometry) === 'function') {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */objectStack[objectStack.length - 1];\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(this.writeFeatureElement, this);\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n    item, serializers, makeSimpleNodeFactory(featureType, featureNS), features, objectStack);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */value.getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   * @override\n   */\n  writeGeometryNode(geometry, options) {\n    options = this.adaptOptions(options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Element} Node.\n   * @api\n   * @override\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(GML3.prototype.readLineStringSegment)\n  }\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing)\n  }\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember)\n  }\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope)\n  }\n};\nexport default GML3;","map":{"version":3,"names":["GML2","GMLBase","GMLNS","LineString","MultiLineString","MultiPolygon","Polygon","OBJECT_PROPERTY_NODE_FACTORY","XML_SCHEMA_INSTANCE_URI","createElementNS","getAllTextContent","makeArrayExtender","makeArrayPusher","makeChildAppender","makeReplacer","makeSimpleNodeFactory","parseNode","pushParseAndPop","pushSerializeAndPop","createOrUpdate","extend","get","getProjection","readNonNegativeIntegerString","writeStringTextNode","transformExtentWithOptions","transformGeometryWithOptions","schemaLocation","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML3","constructor","options","surface_","surface","undefined","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","hasZ","readMultiCurve","node","objectStack","lineStrings","MULTICURVE_PARSERS","multiLineString","readFlatCurveRing","flatCoordinates","i","ii","length","getFlatCoordinates","readMultiSurface","polygons","MULTISURFACE_PARSERS","curveMemberParser","CURVEMEMBER_PARSERS","surfaceMemberParser","SURFACEMEMBER_PARSERS","readPatch","PATCHES_PARSERS","readSegment","SEGMENTS_PARSERS","readPolygonPatch","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser","flatLinearRing","RING_PARSERS","flatLinearRings","push","exteriorParser","readSurface","SURFACE_PARSERS","ends","readCurve","CURVE_PARSERS","lineString","readEnvelope","ENVELOPE_PARSERS","readFlatPos","s","re","m","exec","parseFloat","substr","context","containerSrs","axisOrientation","getAxisOrientation","y","x","len","readFlatPosList","replace","contextDimension","coords","split","dim","getAttribute","parentNode","asXYZ","startsWith","z","writePos_","value","srsDimension","setAttribute","srsName","point","getCoordinates","getCoords_","writePosList_","points","parts","Array","join","writePoint","geometry","pos","namespaceURI","appendChild","writeEnvelope","extent","keys","values","ENVELOPE_SERIALIZERS","writeLinearRing","posList","RING_NODE_FACTORY_","nodeName","exteriorWritten","writeSurfaceOrPolygon","rings","getLinearRings","RING_SERIALIZERS","patches","writeSurfacePatches_","writeCurveOrLineString","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","writeMultiCurveOrLineString","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","writeRing","ring","linearRing","writeSurfaceOrPolygonMember","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember","writeLineStringOrCurveMember","line","writeGeometryElement","item","Object","assign","isArray","GEOMETRY_SERIALIZERS","writeFeatureElement","feature","fid","getId","featureNS","geometryName","getGeometryName","serializers","hasProperties","properties","getProperties","key","getSimplifiedGeometry","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","prototype","readFlatCoordinates","GEOMETRY_PARSERS","readPoint","readMultiPoint","readLineString","readMultiLineString","readLinearRing","readPolygon","readMultiPolygon","readFlatLinearRing","writeFeatures"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/format/GML3.js"],"sourcesContent":["/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {createOrUpdate} from '../extent.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation =\n  GMLNS +\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n  '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ =\n      options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ =\n      options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTISURFACE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.PATCHES_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.SURFACE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.CURVE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.ENVELOPE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[2][0],\n      flatCoordinates[2][1],\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const axisOrientation = containerSrs\n      ? getProjection(containerSrs).getAxisOrientation()\n      : 'enu';\n    if (axisOrientation === 'neu') {\n      for (let i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    const axisOrientation = containerSrs\n      ? getProjection(containerSrs).getAxisOrientation()\n      : 'enu';\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n    ) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'),\n      );\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    const asXYZ = axisOrientation.startsWith('en');\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (asXYZ) {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    const axisOrientation = srsName\n      ? getProjection(srsName).getAxisOrientation()\n      : 'enu';\n    const point = value.getCoordinates();\n    // only 2d for simple features profile\n    let coords = axisOrientation.startsWith('en')\n      ? point[0] + ' ' + point[1]\n      : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    const axisOrientation = srsName\n      ? getProjection(srsName).getAxisOrientation()\n      : 'enu';\n    let coords = axisOrientation.startsWith('en')\n      ? point[0] + ' ' + point[1]\n      : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior',\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this,\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context,\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context,\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null && value !== undefined) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this,\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys,\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement,\n      this,\n    );\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS),\n      features,\n      objectStack,\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName],\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   * @override\n   */\n  writeGeometryNode(geometry, options) {\n    options = this.adaptOptions(options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Element} Node.\n   * @api\n   * @override\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation,\n    );\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment,\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember,\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember,\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember,\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember,\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString,\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon,\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon,\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML3;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}