{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hasan\\\\webproj\\\\openlayers-project\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\n/*import React, { useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchWktData } from '../store/wktSlice';\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport OSM from 'ol/source/OSM';\r\nimport { WKT } from 'ol/format';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport Draw from 'ol/interaction/Draw'; // Çizim etkileşimi için gerekli\r\nimport { setDrawActive } from '../store/drawSlice'; // Redux'tan drawActive durumunu güncellemek için\r\nimport { AddFeature } from './AddFeature';\r\n\r\nconst MapComponent = () => {\r\n  const dispatch = useDispatch();\r\n  const wktData = useSelector((state) => state.wkt.wktData);\r\n  const status = useSelector((state) => state.wkt.status);\r\n  const drawType = useSelector((state) => state.draw.drawType); // Çizim türü\r\n  const drawActive = useSelector((state) => state.draw.drawActive); // Çizim aktif mi?\r\n\r\n  const mapRef = useRef(); \r\n  const vectorSource = useRef(new VectorSource());\r\n  const drawInteraction = useRef(null); // Çizim etkileşimini saklamak için referans\r\n\r\n  // Harita yükleme\r\n  useEffect(() => {\r\n    if (!mapRef.current) {\r\n      mapRef.current = new Map({\r\n        target: 'map',\r\n        layers: [\r\n          new TileLayer({ source: new OSM() }), \r\n          new VectorLayer({ source: vectorSource.current }), \r\n        ],\r\n        view: new View({ center: fromLonLat([29.035767, 41.065685]), zoom: 6 }),\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // WKT verisini işleme\r\n  useEffect(() => {\r\n    if (status === 'succeeded') {\r\n      const format = new WKT();\r\n      wktData.forEach(({ log, id, name }) => {\r\n        const feature = format.readFeature(log, {\r\n          dataProjection: 'EPSG:3857',\r\n          featureProjection: 'EPSG:3857',\r\n        });\r\n\r\n        feature.setProperties({ id, name });\r\n        vectorSource.current.addFeature(feature);\r\n      });\r\n    }\r\n  }, [wktData, status]);\r\n\r\n  // Çizim türü değiştiğinde etkileşimi güncelleme\r\n  useEffect(() => {\r\n    if (drawInteraction.current) {\r\n      mapRef.current.removeInteraction(drawInteraction.current); // Eski etkileşimi kaldır\r\n    }\r\n\r\n    if (drawActive && drawType) {\r\n      drawInteraction.current = new Draw({\r\n        source: vectorSource.current,\r\n        type: drawType, // Point, LineString veya Polygon\r\n      });\r\n\r\n      mapRef.current.addInteraction(drawInteraction.current);\r\n\r\n      // Çizim bittiğinde Redux durumunu kapat\r\n      drawInteraction.current.on('drawend', () => {\r\n        dispatch(setDrawActive(false));\r\n      });\r\n    }\r\n  }, [drawType, drawActive, dispatch]);\r\n\r\n  return <div id=\"map\" className=\"w-full h-screen\"></div>; // Harita div'i\r\n};\r\n\r\nexport default MapComponent; */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchWktData, addFeature } from '../store/wktSlice';\nimport { Map } from 'ol';\nimport { getCenter } from 'ol/extent';\nimport View from 'ol/View';\nimport { Tile as TileLayer } from 'ol/layer';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { Vector as VectorSource } from 'ol/source';\nimport OSM from 'ol/source/OSM';\nimport { WKT } from 'ol/format';\nimport { fromLonLat } from 'ol/proj';\nimport { Draw } from 'ol/interaction';\nimport { setDrawActive } from '../store/drawSlice';\nimport AddFeature from './AddFeature';\nimport { resetZoom } from '../store/featureSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const dispatch = useDispatch();\n  const wktData = useSelector(state => state.wkt.wktData);\n  const status = useSelector(state => state.wkt.status);\n  const drawType = useSelector(state => state.draw.drawType);\n  const drawActive = useSelector(state => state.draw.drawActive);\n  const zoomMap = useSelector(state => state.feature.zoom);\n  const featureId = useSelector(state => state.feature.id);\n  const featureLog = useSelector(state => state.feature.log);\n  const featureName = useSelector(state => state.feature.name);\n  const mapRef = useRef();\n  const vectorSource = useRef(new VectorSource());\n  const drawInteraction = useRef(null);\n  const [selectedFeature, setSelectedFeature] = useState(null); // Çizim tamamlandığında özellik\n\n  useEffect(() => {\n    dispatch(fetchWktData()); // Sayfa yüklendiğinde thunk'ı tetikle\n  }, [dispatch]);\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = new Map({\n        target: 'map',\n        layers: [new TileLayer({\n          source: new OSM()\n        }), new VectorLayer({\n          source: vectorSource.current\n        })],\n        view: new View({\n          center: fromLonLat([29.035767, 41.065685]),\n          zoom: 6\n        })\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (status === 'succeeded') {\n      const format = new WKT();\n      wktData.forEach(({\n        log,\n        id,\n        name\n      }) => {\n        const feature = format.readFeature(log, {\n          dataProjection: 'EPSG:3857',\n          featureProjection: 'EPSG:3857'\n        });\n        feature.setProperties({\n          id,\n          name\n        });\n        vectorSource.current.addFeature(feature);\n      });\n    }\n  }, [wktData, status]);\n  useEffect(() => {\n    if (drawInteraction.current) {\n      mapRef.current.removeInteraction(drawInteraction.current); // Önceki etkileşimi kaldır\n    }\n    if (drawActive && drawType) {\n      drawInteraction.current = new Draw({\n        source: vectorSource.current,\n        type: drawType\n      });\n      drawInteraction.current.on('drawend', event => {\n        const feature = event.feature; // Yeni oluşturulan özellik\n        setSelectedFeature(feature); // Popup'u aç\n        dispatch(setDrawActive(false)); // Çizim etkileşimini kapat\n      });\n      mapRef.current.addInteraction(drawInteraction.current);\n    }\n  }, [drawType, drawActive, dispatch]);\n  useEffect(() => {\n    if (zoomMap) {\n      const wktFormat = new WKT();\n      const feature = wktFormat.readFeature(featureLog, {\n        dataProjection: 'EPSG:3857',\n        featureProjection: 'EPSG:3857'\n      });\n      const featureCenter = getCenter(feature.getGeometry().getExtent());\n      const view = mapRef.current.getView();\n      view.setCenter(featureCenter);\n      const targetZoom = 9;\n      view.setZoom(targetZoom);\n      dispatch(resetZoom());\n    }\n  }, [zoomMap, dispatch, featureLog]);\n  const handleSaveFeature = async feature => {\n    const wkt = new WKT().writeFeature(feature); // WKT formatına çevir\n    const name = feature.get('name');\n    try {\n      const response = await fetch('https://localhost:7014/api/Logs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          log: wkt\n        })\n      });\n      if (response.ok) {\n        const savedFeature = await response.json();\n        alert('Feature saved successfully!');\n        dispatch(addFeature(savedFeature)); // Redux state'e ekle\n        setSelectedFeature(null);\n      } else {\n        alert('Failed to save feature.');\n      }\n    } catch (error) {\n      console.error('Error saving feature:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      className: \"w-full h-screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), selectedFeature && /*#__PURE__*/_jsxDEV(AddFeature, {\n      feature: selectedFeature,\n      onClose: () => setSelectedFeature(null),\n      onSave: handleSaveFeature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"00GOgyXPtm0Tasc1dBi6y3Hnv48=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useSelector","useDispatch","fetchWktData","addFeature","Map","getCenter","View","Tile","TileLayer","Vector","VectorLayer","VectorSource","OSM","WKT","fromLonLat","Draw","setDrawActive","AddFeature","resetZoom","jsxDEV","_jsxDEV","MapComponent","_s","dispatch","wktData","state","wkt","status","drawType","draw","drawActive","zoomMap","feature","zoom","featureId","id","featureLog","log","featureName","name","mapRef","vectorSource","drawInteraction","selectedFeature","setSelectedFeature","current","target","layers","source","view","center","format","forEach","readFeature","dataProjection","featureProjection","setProperties","removeInteraction","type","on","event","addInteraction","wktFormat","featureCenter","getGeometry","getExtent","getView","setCenter","targetZoom","setZoom","handleSaveFeature","writeFeature","get","response","fetch","method","headers","body","JSON","stringify","ok","savedFeature","json","alert","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onSave","_c","$RefreshReg$"],"sources":["C:/Users/hasan/webproj/openlayers-project/src/components/Map.js"],"sourcesContent":["/*import React, { useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchWktData } from '../store/wktSlice';\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport OSM from 'ol/source/OSM';\r\nimport { WKT } from 'ol/format';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport Draw from 'ol/interaction/Draw'; // Çizim etkileşimi için gerekli\r\nimport { setDrawActive } from '../store/drawSlice'; // Redux'tan drawActive durumunu güncellemek için\r\nimport { AddFeature } from './AddFeature';\r\n\r\nconst MapComponent = () => {\r\n  const dispatch = useDispatch();\r\n  const wktData = useSelector((state) => state.wkt.wktData);\r\n  const status = useSelector((state) => state.wkt.status);\r\n  const drawType = useSelector((state) => state.draw.drawType); // Çizim türü\r\n  const drawActive = useSelector((state) => state.draw.drawActive); // Çizim aktif mi?\r\n\r\n  const mapRef = useRef(); \r\n  const vectorSource = useRef(new VectorSource());\r\n  const drawInteraction = useRef(null); // Çizim etkileşimini saklamak için referans\r\n\r\n  // Harita yükleme\r\n  useEffect(() => {\r\n    if (!mapRef.current) {\r\n      mapRef.current = new Map({\r\n        target: 'map',\r\n        layers: [\r\n          new TileLayer({ source: new OSM() }), \r\n          new VectorLayer({ source: vectorSource.current }), \r\n        ],\r\n        view: new View({ center: fromLonLat([29.035767, 41.065685]), zoom: 6 }),\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // WKT verisini işleme\r\n  useEffect(() => {\r\n    if (status === 'succeeded') {\r\n      const format = new WKT();\r\n      wktData.forEach(({ log, id, name }) => {\r\n        const feature = format.readFeature(log, {\r\n          dataProjection: 'EPSG:3857',\r\n          featureProjection: 'EPSG:3857',\r\n        });\r\n\r\n        feature.setProperties({ id, name });\r\n        vectorSource.current.addFeature(feature);\r\n      });\r\n    }\r\n  }, [wktData, status]);\r\n\r\n  // Çizim türü değiştiğinde etkileşimi güncelleme\r\n  useEffect(() => {\r\n    if (drawInteraction.current) {\r\n      mapRef.current.removeInteraction(drawInteraction.current); // Eski etkileşimi kaldır\r\n    }\r\n\r\n    if (drawActive && drawType) {\r\n      drawInteraction.current = new Draw({\r\n        source: vectorSource.current,\r\n        type: drawType, // Point, LineString veya Polygon\r\n      });\r\n\r\n      mapRef.current.addInteraction(drawInteraction.current);\r\n\r\n      // Çizim bittiğinde Redux durumunu kapat\r\n      drawInteraction.current.on('drawend', () => {\r\n        dispatch(setDrawActive(false));\r\n      });\r\n    }\r\n  }, [drawType, drawActive, dispatch]);\r\n\r\n  return <div id=\"map\" className=\"w-full h-screen\"></div>; // Harita div'i\r\n};\r\n\r\nexport default MapComponent; */\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchWktData, addFeature } from '../store/wktSlice';\r\nimport { Map } from 'ol'; \r\nimport { getCenter } from 'ol/extent'; \r\nimport View from 'ol/View'; \r\nimport { Tile as TileLayer } from 'ol/layer';\r\nimport { Vector as VectorLayer } from 'ol/layer';\r\nimport { Vector as VectorSource } from 'ol/source';\r\nimport OSM from 'ol/source/OSM';\r\nimport { WKT } from 'ol/format';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport { Draw } from 'ol/interaction';\r\nimport { setDrawActive } from '../store/drawSlice';\r\nimport AddFeature from './AddFeature';\r\nimport { resetZoom, } from '../store/featureSlice';\r\n\r\nconst MapComponent = () => {\r\n  const dispatch = useDispatch();\r\n  const wktData = useSelector((state) => state.wkt.wktData);\r\n  const status = useSelector((state) => state.wkt.status);\r\n  const drawType = useSelector((state) => state.draw.drawType);\r\n  const drawActive = useSelector((state) => state.draw.drawActive);\r\n  const zoomMap = useSelector((state) => state.feature.zoom);\r\n  const featureId = useSelector((state) => state.feature.id);\r\n  const featureLog = useSelector((state) => state.feature.log);\r\n  const featureName = useSelector((state) => state.feature.name);\r\n  \r\n\r\n  const mapRef = useRef();\r\n  const vectorSource = useRef(new VectorSource());\r\n  const drawInteraction = useRef(null);\r\n  const [selectedFeature, setSelectedFeature] = useState(null); // Çizim tamamlandığında özellik\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchWktData()); // Sayfa yüklendiğinde thunk'ı tetikle\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!mapRef.current) {\r\n      mapRef.current = new Map({\r\n        target: 'map',\r\n        layers: [\r\n          new TileLayer({ source: new OSM() }),\r\n          new VectorLayer({ source: vectorSource.current }),\r\n        ],\r\n        view: new View({ center: fromLonLat([29.035767, 41.065685]), zoom: 6 }),\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (status === 'succeeded') {\r\n      const format = new WKT();\r\n      wktData.forEach(({ log, id, name }) => {\r\n        const feature = format.readFeature(log, {\r\n          dataProjection: 'EPSG:3857',\r\n          featureProjection: 'EPSG:3857',\r\n        });\r\n\r\n        feature.setProperties({ id, name });\r\n        vectorSource.current.addFeature(feature);\r\n      });\r\n    }\r\n  }, [wktData, status]);\r\n\r\n  useEffect(() => {\r\n    if (drawInteraction.current) {\r\n      mapRef.current.removeInteraction(drawInteraction.current); // Önceki etkileşimi kaldır\r\n    }\r\n\r\n    if (drawActive && drawType) {\r\n      drawInteraction.current = new Draw({\r\n        source: vectorSource.current,\r\n        type: drawType,\r\n      });\r\n\r\n      drawInteraction.current.on('drawend', (event) => {\r\n        const feature = event.feature; // Yeni oluşturulan özellik\r\n        setSelectedFeature(feature); // Popup'u aç\r\n        dispatch(setDrawActive(false)); // Çizim etkileşimini kapat\r\n      });\r\n\r\n      mapRef.current.addInteraction(drawInteraction.current);\r\n    }\r\n  }, [drawType, drawActive, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if(zoomMap) {\r\n      const wktFormat = new WKT();\r\n      const feature = wktFormat.readFeature(featureLog, {\r\n      dataProjection: 'EPSG:3857',\r\n      featureProjection: 'EPSG:3857',\r\n    });\r\n\r\n    const featureCenter = getCenter(feature.getGeometry().getExtent());\r\n\r\n    const view = mapRef.current.getView();\r\n    view.setCenter(featureCenter);\r\n\r\n    const targetZoom = 9;\r\n    view.setZoom(targetZoom);\r\n    dispatch(resetZoom());\r\n    }\r\n  }, [zoomMap ,dispatch, featureLog]);\r\n\r\n  const handleSaveFeature = async (feature) => {\r\n    const wkt = new WKT().writeFeature(feature); // WKT formatına çevir\r\n    const name = feature.get('name');\r\n\r\n    try {\r\n      const response = await fetch('https://localhost:7014/api/Logs', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name, log: wkt }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const savedFeature = await response.json();\r\n      alert('Feature saved successfully!');\r\n      dispatch(addFeature(savedFeature)); // Redux state'e ekle\r\n      setSelectedFeature(null);\r\n      } else {\r\n        alert('Failed to save feature.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving feature:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <div id=\"map\" className=\"w-full h-screen\" ></div>\r\n      {selectedFeature && (\r\n        <AddFeature\r\n          feature={selectedFeature}\r\n          onClose={() => setSelectedFeature(null)}\r\n          onSave={handleSaveFeature}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,YAAY,EAAEC,UAAU,QAAQ,mBAAmB;AAC5D,SAASC,GAAG,QAAQ,IAAI;AACxB,SAASC,SAAS,QAAQ,WAAW;AACrC,OAAOC,IAAI,MAAM,SAAS;AAC1B,SAASC,IAAI,IAAIC,SAAS,QAAQ,UAAU;AAC5C,SAASC,MAAM,IAAIC,WAAW,QAAQ,UAAU;AAChD,SAASD,MAAM,IAAIE,YAAY,QAAQ,WAAW;AAClD,OAAOC,GAAG,MAAM,eAAe;AAC/B,SAASC,GAAG,QAAQ,WAAW;AAC/B,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,IAAI,QAAQ,gBAAgB;AACrC,SAASC,aAAa,QAAQ,oBAAoB;AAClD,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,SAAS,QAAS,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAC9B,MAAMuB,OAAO,GAAGxB,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACC,GAAG,CAACF,OAAO,CAAC;EACzD,MAAMG,MAAM,GAAG3B,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACC,GAAG,CAACC,MAAM,CAAC;EACvD,MAAMC,QAAQ,GAAG5B,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACI,IAAI,CAACD,QAAQ,CAAC;EAC5D,MAAME,UAAU,GAAG9B,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACI,IAAI,CAACC,UAAU,CAAC;EAChE,MAAMC,OAAO,GAAG/B,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACO,OAAO,CAACC,IAAI,CAAC;EAC1D,MAAMC,SAAS,GAAGlC,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACO,OAAO,CAACG,EAAE,CAAC;EAC1D,MAAMC,UAAU,GAAGpC,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACO,OAAO,CAACK,GAAG,CAAC;EAC5D,MAAMC,WAAW,GAAGtC,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACO,OAAO,CAACO,IAAI,CAAC;EAG9D,MAAMC,MAAM,GAAG1C,MAAM,CAAC,CAAC;EACvB,MAAM2C,YAAY,GAAG3C,MAAM,CAAC,IAAIa,YAAY,CAAC,CAAC,CAAC;EAC/C,MAAM+B,eAAe,GAAG5C,MAAM,CAAC,IAAI,CAAC;EACpC,MAAM,CAAC6C,eAAe,EAAEC,kBAAkB,CAAC,GAAG7C,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9DF,SAAS,CAAC,MAAM;IACd0B,QAAQ,CAACrB,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACqB,QAAQ,CAAC,CAAC;EAEd1B,SAAS,CAAC,MAAM;IACd,IAAI,CAAC2C,MAAM,CAACK,OAAO,EAAE;MACnBL,MAAM,CAACK,OAAO,GAAG,IAAIzC,GAAG,CAAC;QACvB0C,MAAM,EAAE,KAAK;QACbC,MAAM,EAAE,CACN,IAAIvC,SAAS,CAAC;UAAEwC,MAAM,EAAE,IAAIpC,GAAG,CAAC;QAAE,CAAC,CAAC,EACpC,IAAIF,WAAW,CAAC;UAAEsC,MAAM,EAAEP,YAAY,CAACI;QAAQ,CAAC,CAAC,CAClD;QACDI,IAAI,EAAE,IAAI3C,IAAI,CAAC;UAAE4C,MAAM,EAAEpC,UAAU,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;UAAEmB,IAAI,EAAE;QAAE,CAAC;MACxE,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAENpC,SAAS,CAAC,MAAM;IACd,IAAI8B,MAAM,KAAK,WAAW,EAAE;MAC1B,MAAMwB,MAAM,GAAG,IAAItC,GAAG,CAAC,CAAC;MACxBW,OAAO,CAAC4B,OAAO,CAAC,CAAC;QAAEf,GAAG;QAAEF,EAAE;QAAEI;MAAK,CAAC,KAAK;QACrC,MAAMP,OAAO,GAAGmB,MAAM,CAACE,WAAW,CAAChB,GAAG,EAAE;UACtCiB,cAAc,EAAE,WAAW;UAC3BC,iBAAiB,EAAE;QACrB,CAAC,CAAC;QAEFvB,OAAO,CAACwB,aAAa,CAAC;UAAErB,EAAE;UAAEI;QAAK,CAAC,CAAC;QACnCE,YAAY,CAACI,OAAO,CAAC1C,UAAU,CAAC6B,OAAO,CAAC;MAC1C,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACR,OAAO,EAAEG,MAAM,CAAC,CAAC;EAErB9B,SAAS,CAAC,MAAM;IACd,IAAI6C,eAAe,CAACG,OAAO,EAAE;MAC3BL,MAAM,CAACK,OAAO,CAACY,iBAAiB,CAACf,eAAe,CAACG,OAAO,CAAC,CAAC,CAAC;IAC7D;IAEA,IAAIf,UAAU,IAAIF,QAAQ,EAAE;MAC1Bc,eAAe,CAACG,OAAO,GAAG,IAAI9B,IAAI,CAAC;QACjCiC,MAAM,EAAEP,YAAY,CAACI,OAAO;QAC5Ba,IAAI,EAAE9B;MACR,CAAC,CAAC;MAEFc,eAAe,CAACG,OAAO,CAACc,EAAE,CAAC,SAAS,EAAGC,KAAK,IAAK;QAC/C,MAAM5B,OAAO,GAAG4B,KAAK,CAAC5B,OAAO,CAAC,CAAC;QAC/BY,kBAAkB,CAACZ,OAAO,CAAC,CAAC,CAAC;QAC7BT,QAAQ,CAACP,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;MAEFwB,MAAM,CAACK,OAAO,CAACgB,cAAc,CAACnB,eAAe,CAACG,OAAO,CAAC;IACxD;EACF,CAAC,EAAE,CAACjB,QAAQ,EAAEE,UAAU,EAAEP,QAAQ,CAAC,CAAC;EAEpC1B,SAAS,CAAC,MAAM;IACd,IAAGkC,OAAO,EAAE;MACV,MAAM+B,SAAS,GAAG,IAAIjD,GAAG,CAAC,CAAC;MAC3B,MAAMmB,OAAO,GAAG8B,SAAS,CAACT,WAAW,CAACjB,UAAU,EAAE;QAClDkB,cAAc,EAAE,WAAW;QAC3BC,iBAAiB,EAAE;MACrB,CAAC,CAAC;MAEF,MAAMQ,aAAa,GAAG1D,SAAS,CAAC2B,OAAO,CAACgC,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;MAElE,MAAMhB,IAAI,GAAGT,MAAM,CAACK,OAAO,CAACqB,OAAO,CAAC,CAAC;MACrCjB,IAAI,CAACkB,SAAS,CAACJ,aAAa,CAAC;MAE7B,MAAMK,UAAU,GAAG,CAAC;MACpBnB,IAAI,CAACoB,OAAO,CAACD,UAAU,CAAC;MACxB7C,QAAQ,CAACL,SAAS,CAAC,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAACa,OAAO,EAAER,QAAQ,EAAEa,UAAU,CAAC,CAAC;EAEnC,MAAMkC,iBAAiB,GAAG,MAAOtC,OAAO,IAAK;IAC3C,MAAMN,GAAG,GAAG,IAAIb,GAAG,CAAC,CAAC,CAAC0D,YAAY,CAACvC,OAAO,CAAC,CAAC,CAAC;IAC7C,MAAMO,IAAI,GAAGP,OAAO,CAACwC,GAAG,CAAC,MAAM,CAAC;IAEhC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAExC,IAAI;UAAEF,GAAG,EAAEX;QAAI,CAAC;MACzC,CAAC,CAAC;MAEF,IAAI+C,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAC5CC,KAAK,CAAC,6BAA6B,CAAC;QACpC5D,QAAQ,CAACpB,UAAU,CAAC8E,YAAY,CAAC,CAAC,CAAC,CAAC;QACpCrC,kBAAkB,CAAC,IAAI,CAAC;MACxB,CAAC,MAAM;QACLuC,KAAK,CAAC,yBAAyB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,oBACEhE,OAAA;IAAKkE,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBnE,OAAA;MAAKe,EAAE,EAAC,KAAK;MAACmD,SAAS,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,EAChDhD,eAAe,iBACdvB,OAAA,CAACH,UAAU;MACTe,OAAO,EAAEW,eAAgB;MACzBiD,OAAO,EAAEA,CAAA,KAAMhD,kBAAkB,CAAC,IAAI,CAAE;MACxCiD,MAAM,EAAEvB;IAAkB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrE,EAAA,CA7HID,YAAY;EAAA,QACCpB,WAAW,EACZD,WAAW,EACZA,WAAW,EACTA,WAAW,EACTA,WAAW,EACdA,WAAW,EACTA,WAAW,EACVA,WAAW,EACVA,WAAW;AAAA;AAAA8F,EAAA,GAT3BzE,YAAY;AA+HlB,eAAeA,YAAY;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}