{"ast":null,"code":"/**\n * @module ol/renderer/webgl/FlowLayer\n */\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLTileLayerRenderer from './TileLayer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../../webgl.js';\nimport { DefaultUniform } from '../../webgl/Helper.js';\n\n/**\n * @typedef {import(\"../../layer/Flow.js\").default} LayerType\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} maxSpeed The maximum particle speed in the input data.\n * @property {number} [speedFactor=0.001] A larger factor increases the rate at which particles cross the screen.\n * @property {number} [particles=65536] The number of particles to render.\n * @property {number} [cacheSize=512] The texture cache size.\n * @property {string} tileVertexShader The flow tile vertex shader.\n * @property {string} tileFragmentShader The flow tile fragment shader.\n * @property {string} textureVertexShader Generic texture fragment shader.\n * @property {string} textureFragmentShader Generic texture fragment shader.\n * @property {string} particlePositionVertexShader The particle position vertex shader.\n * @property {string} particlePositionFragmentShader The particle position fragment shader.\n * @property {string} particleColorVertexShader The particle color vertex shader.\n * @property {string} particleColorFragmentShader The particle color fragment shader.\n */\n\n/**\n * Shader uniforms.\n * @enum {string}\n */\nexport const U = {\n  TEXTURE: 'u_texture',\n  VELOCITY_TEXTURE: 'u_velocityTexture',\n  POSITION_TEXTURE: 'u_positionTexture',\n  PARTICLE_COUNT_SQRT: 'u_particleCountSqrt',\n  MAX_SPEED: 'u_maxSpeed',\n  GAIN: 'u_gain',\n  OFFSET: 'u_offset',\n  IS_FLOAT: 'u_isFloat',\n  RANDOM_SEED: 'u_randomSeed',\n  SPEED_FACTOR: 'u_speedFactor',\n  DROP_RATE: 'u_dropRate',\n  DROP_RATE_BUMP: 'u_dropRateBump',\n  OPACITY: 'u_opacity',\n  ROTATION: DefaultUniform.ROTATION,\n  VIEWPORT_SIZE_PX: DefaultUniform.VIEWPORT_SIZE_PX\n};\n\n/**\n * Shader attributes.\n * @enum {string}\n */\nexport const A = {\n  POSITION: 'a_position',\n  INDEX: 'a_index'\n};\n\n/**\n * Shader varyings.\n * @enum {string}\n */\nexport const V = {\n  POSITION: 'v_position'\n};\n\n/**\n * @classdesc\n * Experimental WebGL renderer for vector fields.\n * @extends {WebGLTileLayerRenderer<LayerType>}\n */\nclass FlowLayerRenderer extends WebGLTileLayerRenderer {\n  /**\n   * @param {LayerType} layer The tiled field layer.\n   * @param {Options} options The renderer options.\n   */\n  constructor(layer, options) {\n    super(layer, {\n      vertexShader: options.tileVertexShader,\n      fragmentShader: options.tileFragmentShader,\n      cacheSize: options.cacheSize,\n      // TODO: rework the post-processing logic\n      // see https://github.com/openlayers/openlayers/issues/16120\n      postProcesses: [{}],\n      uniforms: {\n        [U.MAX_SPEED]: options.maxSpeed\n      }\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particleColorFragmentShader_ = options.particleColorFragmentShader;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.velocityTexture_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.particleCountSqrt_ = options.particles ? Math.ceil(Math.sqrt(options.particles)) : 256;\n\n    /**\n     * @type {WebGLArrayBuffer}\n     * @private\n     */\n    this.particleIndexBuffer_;\n\n    /**\n     * @type {WebGLArrayBuffer}\n     * @private\n     */\n    this.quadBuffer_;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.particlePositionProgram_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particlePositionVertexShader_ = options.particlePositionVertexShader;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particlePositionFragmentShader_ = options.particlePositionFragmentShader;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.previousPositionTexture_;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.nextPositionTexture_;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.particleColorProgram_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particleColorVertexShader_ = options.particleColorVertexShader;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particleColorFragmentShader_ = options.particleColorFragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.textureProgram_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.textureVertexShader_ = options.textureVertexShader;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.textureFragmentShader_ = options.textureFragmentShader;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.previousTrailsTexture_;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.nextTrailsTexture_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.fadeOpacity_ = 0.996; // how fast the particle trails fade on each frame\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxSpeed_ = options.maxSpeed;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.speedFactor_ = options.speedFactor || 0.001;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dropRate_ = 0.003; // how often the particles move to a random place\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dropRateBump_ = 0.01; // drop rate increase relative to individual particle speed\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.tempVec2_ = [0, 0];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedWidth_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedHeight_ = 0;\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n    const helper = this.helper;\n    const gl = helper.getGL();\n    this.framebuffer_ = gl.createFramebuffer();\n    const particleCount = this.particleCountSqrt_ * this.particleCountSqrt_;\n    const particleIndices = new Float32Array(particleCount);\n    for (let i = 0; i < particleCount; ++i) {\n      particleIndices[i] = i;\n    }\n    const particleIndexBuffer = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    particleIndexBuffer.setArray(particleIndices);\n    helper.flushBufferData(particleIndexBuffer);\n    this.particleIndexBuffer_ = particleIndexBuffer;\n    const quadIndices = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]);\n    const quadBuffer = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    quadBuffer.setArray(quadIndices);\n    helper.flushBufferData(quadBuffer);\n    this.quadBuffer_ = quadBuffer;\n    const particlePositions = new Uint8Array(particleCount * 4);\n    for (let i = 0; i < particlePositions.length; ++i) {\n      particlePositions[i] = Math.floor(Math.random() * 256);\n    }\n    this.previousPositionTexture_ = helper.createTexture([this.particleCountSqrt_, this.particleCountSqrt_], particlePositions, null, true);\n    this.nextPositionTexture_ = helper.createTexture([this.particleCountSqrt_, this.particleCountSqrt_], particlePositions, null, true);\n    this.particlePositionProgram_ = helper.getProgram(this.particlePositionFragmentShader_, this.particlePositionVertexShader_);\n    this.particleColorProgram_ = helper.getProgram(this.particleColorFragmentShader_, this.particleColorVertexShader_);\n    this.textureProgram_ = helper.getProgram(this.textureFragmentShader_, this.textureVertexShader_);\n  }\n  createSizeDependentTextures_() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const canvas = helper.getCanvas();\n    const screenWidth = canvas.width;\n    const screenHeight = canvas.height;\n    const blank = new Uint8Array(screenWidth * screenHeight * 4);\n    if (this.nextTrailsTexture_) {\n      gl.deleteTexture(this.nextTrailsTexture_);\n    }\n    this.nextTrailsTexture_ = helper.createTexture([screenWidth, screenHeight], blank, null, true);\n    if (this.previousTrailsTexture_) {\n      gl.deleteTexture(this.previousTrailsTexture_);\n    }\n    this.previousTrailsTexture_ = helper.createTexture([screenWidth, screenHeight], blank, null, true);\n  }\n\n  /**\n   * @override\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  beforeFinalize(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const canvas = helper.getCanvas();\n    const screenWidth = canvas.width;\n    const screenHeight = canvas.height;\n    if (this.renderedWidth_ != screenWidth || this.renderedHeight_ != screenHeight) {\n      this.createSizeDependentTextures_();\n    }\n    const size = [screenWidth, screenHeight];\n\n    // copy current frame buffer to the velocity texture\n    this.velocityTexture_ = helper.createTexture(size, null, this.velocityTexture_);\n    gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, screenWidth, screenHeight, 0);\n    this.drawParticleTrails_(frameState);\n    this.updateParticlePositions_(frameState);\n    frameState.animate = true;\n    this.renderedWidth_ = screenWidth;\n    this.renderedHeight_ = screenHeight;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  drawParticleTrails_(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    helper.bindFrameBuffer(this.framebuffer_, this.nextTrailsTexture_);\n    this.drawTexture_(this.previousTrailsTexture_, this.fadeOpacity_);\n    this.drawParticleColor_(frameState);\n    helper.bindInitialFrameBuffer();\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    this.drawTexture_(this.nextTrailsTexture_, 1);\n    gl.disable(gl.BLEND);\n    const current = this.nextTrailsTexture_;\n    this.nextTrailsTexture_ = this.previousTrailsTexture_;\n    this.previousTrailsTexture_ = current;\n  }\n\n  /**\n   * @param {WebGLTexture} texture The texture to draw.\n   * @param {number} opacity The opacity.\n   */\n  drawTexture_(texture, opacity) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    helper.useProgram(this.textureProgram_);\n    helper.bindTexture(texture, 0, U.TEXTURE);\n    helper.bindAttribute(this.quadBuffer_, A.POSITION, 2);\n    this.helper.setUniformFloatValue(U.OPACITY, opacity);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  drawParticleColor_(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    helper.useProgram(this.particleColorProgram_);\n    const particleCount = this.particleCountSqrt_ * this.particleCountSqrt_;\n    helper.bindAttribute(this.particleIndexBuffer_, A.INDEX, 1);\n    helper.bindTexture(this.previousPositionTexture_, 0, U.POSITION_TEXTURE);\n    helper.bindTexture(this.velocityTexture_, 1, U.VELOCITY_TEXTURE);\n    this.helper.setUniformFloatValue(U.PARTICLE_COUNT_SQRT, this.particleCountSqrt_);\n    const rotation = this.tempVec2_;\n    rotation[0] = Math.cos(frameState.viewState.rotation);\n    rotation[1] = Math.sin(frameState.viewState.rotation);\n    this.helper.setUniformFloatVec2(U.ROTATION, rotation);\n    this.helper.setUniformFloatValue(U.MAX_SPEED, this.maxSpeed_);\n    gl.drawArrays(gl.POINTS, 0, particleCount);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  updateParticlePositions_(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    helper.useProgram(this.particlePositionProgram_);\n    gl.viewport(0, 0, this.particleCountSqrt_, this.particleCountSqrt_);\n    helper.bindFrameBuffer(this.framebuffer_, this.nextPositionTexture_);\n    helper.bindTexture(this.previousPositionTexture_, 0, U.POSITION_TEXTURE);\n    helper.bindTexture(this.velocityTexture_, 1, U.VELOCITY_TEXTURE);\n    helper.bindAttribute(this.quadBuffer_, A.POSITION, 2);\n    helper.setUniformFloatValue(U.RANDOM_SEED, Math.random());\n    helper.setUniformFloatValue(U.SPEED_FACTOR, this.speedFactor_);\n    helper.setUniformFloatValue(U.DROP_RATE, this.dropRate_);\n    helper.setUniformFloatValue(U.DROP_RATE_BUMP, this.dropRateBump_);\n    const rotation = this.tempVec2_;\n    rotation[0] = Math.cos(frameState.viewState.rotation);\n    rotation[1] = Math.sin(frameState.viewState.rotation);\n    this.helper.setUniformFloatVec2(U.ROTATION, rotation);\n    const size = frameState.size;\n    this.helper.setUniformFloatVec2(U.VIEWPORT_SIZE_PX, [size[0], size[1]]);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    const current = this.nextPositionTexture_;\n    this.nextPositionTexture_ = this.previousPositionTexture_;\n    this.previousPositionTexture_ = current;\n  }\n}\nexport default FlowLayerRenderer;","map":{"version":3,"names":["WebGLArrayBuffer","WebGLTileLayerRenderer","ARRAY_BUFFER","STATIC_DRAW","DefaultUniform","U","TEXTURE","VELOCITY_TEXTURE","POSITION_TEXTURE","PARTICLE_COUNT_SQRT","MAX_SPEED","GAIN","OFFSET","IS_FLOAT","RANDOM_SEED","SPEED_FACTOR","DROP_RATE","DROP_RATE_BUMP","OPACITY","ROTATION","VIEWPORT_SIZE_PX","A","POSITION","INDEX","V","FlowLayerRenderer","constructor","layer","options","vertexShader","tileVertexShader","fragmentShader","tileFragmentShader","cacheSize","postProcesses","uniforms","maxSpeed","particleColorFragmentShader_","particleColorFragmentShader","velocityTexture_","particleCountSqrt_","particles","Math","ceil","sqrt","particleIndexBuffer_","quadBuffer_","particlePositionProgram_","particlePositionVertexShader_","particlePositionVertexShader","particlePositionFragmentShader_","particlePositionFragmentShader","previousPositionTexture_","nextPositionTexture_","particleColorProgram_","particleColorVertexShader_","particleColorVertexShader","textureProgram_","textureVertexShader_","textureVertexShader","textureFragmentShader_","textureFragmentShader","previousTrailsTexture_","nextTrailsTexture_","fadeOpacity_","maxSpeed_","speedFactor_","speedFactor","dropRate_","dropRateBump_","tempVec2_","renderedWidth_","renderedHeight_","afterHelperCreated","helper","gl","getGL","framebuffer_","createFramebuffer","particleCount","particleIndices","Float32Array","i","particleIndexBuffer","setArray","flushBufferData","quadIndices","quadBuffer","particlePositions","Uint8Array","length","floor","random","createTexture","getProgram","createSizeDependentTextures_","canvas","getCanvas","screenWidth","width","screenHeight","height","blank","deleteTexture","beforeFinalize","frameState","size","copyTexImage2D","TEXTURE_2D","RGBA","drawParticleTrails_","updateParticlePositions_","animate","bindFrameBuffer","drawTexture_","drawParticleColor_","bindInitialFrameBuffer","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","disable","current","texture","opacity","useProgram","bindTexture","bindAttribute","setUniformFloatValue","drawArrays","TRIANGLES","rotation","cos","viewState","sin","setUniformFloatVec2","POINTS","viewport"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/renderer/webgl/FlowLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/webgl/FlowLayer\n */\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLTileLayerRenderer from './TileLayer.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\nimport {DefaultUniform} from '../../webgl/Helper.js';\n\n/**\n * @typedef {import(\"../../layer/Flow.js\").default} LayerType\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} maxSpeed The maximum particle speed in the input data.\n * @property {number} [speedFactor=0.001] A larger factor increases the rate at which particles cross the screen.\n * @property {number} [particles=65536] The number of particles to render.\n * @property {number} [cacheSize=512] The texture cache size.\n * @property {string} tileVertexShader The flow tile vertex shader.\n * @property {string} tileFragmentShader The flow tile fragment shader.\n * @property {string} textureVertexShader Generic texture fragment shader.\n * @property {string} textureFragmentShader Generic texture fragment shader.\n * @property {string} particlePositionVertexShader The particle position vertex shader.\n * @property {string} particlePositionFragmentShader The particle position fragment shader.\n * @property {string} particleColorVertexShader The particle color vertex shader.\n * @property {string} particleColorFragmentShader The particle color fragment shader.\n */\n\n/**\n * Shader uniforms.\n * @enum {string}\n */\nexport const U = {\n  TEXTURE: 'u_texture',\n  VELOCITY_TEXTURE: 'u_velocityTexture',\n  POSITION_TEXTURE: 'u_positionTexture',\n  PARTICLE_COUNT_SQRT: 'u_particleCountSqrt',\n  MAX_SPEED: 'u_maxSpeed',\n  GAIN: 'u_gain',\n  OFFSET: 'u_offset',\n  IS_FLOAT: 'u_isFloat',\n  RANDOM_SEED: 'u_randomSeed',\n  SPEED_FACTOR: 'u_speedFactor',\n  DROP_RATE: 'u_dropRate',\n  DROP_RATE_BUMP: 'u_dropRateBump',\n  OPACITY: 'u_opacity',\n  ROTATION: DefaultUniform.ROTATION,\n  VIEWPORT_SIZE_PX: DefaultUniform.VIEWPORT_SIZE_PX,\n};\n\n/**\n * Shader attributes.\n * @enum {string}\n */\nexport const A = {\n  POSITION: 'a_position',\n  INDEX: 'a_index',\n};\n\n/**\n * Shader varyings.\n * @enum {string}\n */\nexport const V = {\n  POSITION: 'v_position',\n};\n\n/**\n * @classdesc\n * Experimental WebGL renderer for vector fields.\n * @extends {WebGLTileLayerRenderer<LayerType>}\n */\nclass FlowLayerRenderer extends WebGLTileLayerRenderer {\n  /**\n   * @param {LayerType} layer The tiled field layer.\n   * @param {Options} options The renderer options.\n   */\n  constructor(layer, options) {\n    super(layer, {\n      vertexShader: options.tileVertexShader,\n      fragmentShader: options.tileFragmentShader,\n      cacheSize: options.cacheSize,\n      // TODO: rework the post-processing logic\n      // see https://github.com/openlayers/openlayers/issues/16120\n      postProcesses: [{}],\n      uniforms: {\n        [U.MAX_SPEED]: options.maxSpeed,\n      },\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particleColorFragmentShader_ = options.particleColorFragmentShader;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.velocityTexture_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.particleCountSqrt_ = options.particles\n      ? Math.ceil(Math.sqrt(options.particles))\n      : 256;\n\n    /**\n     * @type {WebGLArrayBuffer}\n     * @private\n     */\n    this.particleIndexBuffer_;\n\n    /**\n     * @type {WebGLArrayBuffer}\n     * @private\n     */\n    this.quadBuffer_;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.particlePositionProgram_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particlePositionVertexShader_ = options.particlePositionVertexShader;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particlePositionFragmentShader_ =\n      options.particlePositionFragmentShader;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.previousPositionTexture_;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.nextPositionTexture_;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.particleColorProgram_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particleColorVertexShader_ = options.particleColorVertexShader;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.particleColorFragmentShader_ = options.particleColorFragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.textureProgram_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.textureVertexShader_ = options.textureVertexShader;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.textureFragmentShader_ = options.textureFragmentShader;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.previousTrailsTexture_;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.nextTrailsTexture_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.fadeOpacity_ = 0.996; // how fast the particle trails fade on each frame\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxSpeed_ = options.maxSpeed;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.speedFactor_ = options.speedFactor || 0.001;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dropRate_ = 0.003; // how often the particles move to a random place\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dropRateBump_ = 0.01; // drop rate increase relative to individual particle speed\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.tempVec2_ = [0, 0];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedWidth_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedHeight_ = 0;\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n    const helper = this.helper;\n\n    const gl = helper.getGL();\n    this.framebuffer_ = gl.createFramebuffer();\n\n    const particleCount = this.particleCountSqrt_ * this.particleCountSqrt_;\n    const particleIndices = new Float32Array(particleCount);\n    for (let i = 0; i < particleCount; ++i) {\n      particleIndices[i] = i;\n    }\n    const particleIndexBuffer = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    particleIndexBuffer.setArray(particleIndices);\n    helper.flushBufferData(particleIndexBuffer);\n    this.particleIndexBuffer_ = particleIndexBuffer;\n\n    const quadIndices = new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]);\n    const quadBuffer = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    quadBuffer.setArray(quadIndices);\n    helper.flushBufferData(quadBuffer);\n    this.quadBuffer_ = quadBuffer;\n\n    const particlePositions = new Uint8Array(particleCount * 4);\n    for (let i = 0; i < particlePositions.length; ++i) {\n      particlePositions[i] = Math.floor(Math.random() * 256);\n    }\n\n    this.previousPositionTexture_ = helper.createTexture(\n      [this.particleCountSqrt_, this.particleCountSqrt_],\n      particlePositions,\n      null,\n      true,\n    );\n\n    this.nextPositionTexture_ = helper.createTexture(\n      [this.particleCountSqrt_, this.particleCountSqrt_],\n      particlePositions,\n      null,\n      true,\n    );\n\n    this.particlePositionProgram_ = helper.getProgram(\n      this.particlePositionFragmentShader_,\n      this.particlePositionVertexShader_,\n    );\n\n    this.particleColorProgram_ = helper.getProgram(\n      this.particleColorFragmentShader_,\n      this.particleColorVertexShader_,\n    );\n\n    this.textureProgram_ = helper.getProgram(\n      this.textureFragmentShader_,\n      this.textureVertexShader_,\n    );\n  }\n\n  createSizeDependentTextures_() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const canvas = helper.getCanvas();\n    const screenWidth = canvas.width;\n    const screenHeight = canvas.height;\n\n    const blank = new Uint8Array(screenWidth * screenHeight * 4);\n\n    if (this.nextTrailsTexture_) {\n      gl.deleteTexture(this.nextTrailsTexture_);\n    }\n    this.nextTrailsTexture_ = helper.createTexture(\n      [screenWidth, screenHeight],\n      blank,\n      null,\n      true,\n    );\n\n    if (this.previousTrailsTexture_) {\n      gl.deleteTexture(this.previousTrailsTexture_);\n    }\n    this.previousTrailsTexture_ = helper.createTexture(\n      [screenWidth, screenHeight],\n      blank,\n      null,\n      true,\n    );\n  }\n\n  /**\n   * @override\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  beforeFinalize(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const canvas = helper.getCanvas();\n    const screenWidth = canvas.width;\n    const screenHeight = canvas.height;\n\n    if (\n      this.renderedWidth_ != screenWidth ||\n      this.renderedHeight_ != screenHeight\n    ) {\n      this.createSizeDependentTextures_();\n    }\n\n    const size = [screenWidth, screenHeight];\n\n    // copy current frame buffer to the velocity texture\n    this.velocityTexture_ = helper.createTexture(\n      size,\n      null,\n      this.velocityTexture_,\n    );\n    gl.copyTexImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      0,\n      0,\n      screenWidth,\n      screenHeight,\n      0,\n    );\n\n    this.drawParticleTrails_(frameState);\n    this.updateParticlePositions_(frameState);\n\n    frameState.animate = true;\n    this.renderedWidth_ = screenWidth;\n    this.renderedHeight_ = screenHeight;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  drawParticleTrails_(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n\n    helper.bindFrameBuffer(this.framebuffer_, this.nextTrailsTexture_);\n\n    this.drawTexture_(this.previousTrailsTexture_, this.fadeOpacity_);\n    this.drawParticleColor_(frameState);\n\n    helper.bindInitialFrameBuffer();\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    this.drawTexture_(this.nextTrailsTexture_, 1);\n    gl.disable(gl.BLEND);\n\n    const current = this.nextTrailsTexture_;\n    this.nextTrailsTexture_ = this.previousTrailsTexture_;\n    this.previousTrailsTexture_ = current;\n  }\n\n  /**\n   * @param {WebGLTexture} texture The texture to draw.\n   * @param {number} opacity The opacity.\n   */\n  drawTexture_(texture, opacity) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n\n    helper.useProgram(this.textureProgram_);\n    helper.bindTexture(texture, 0, U.TEXTURE);\n    helper.bindAttribute(this.quadBuffer_, A.POSITION, 2);\n    this.helper.setUniformFloatValue(U.OPACITY, opacity);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  drawParticleColor_(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n\n    helper.useProgram(this.particleColorProgram_);\n\n    const particleCount = this.particleCountSqrt_ * this.particleCountSqrt_;\n\n    helper.bindAttribute(this.particleIndexBuffer_, A.INDEX, 1);\n\n    helper.bindTexture(this.previousPositionTexture_, 0, U.POSITION_TEXTURE);\n    helper.bindTexture(this.velocityTexture_, 1, U.VELOCITY_TEXTURE);\n\n    this.helper.setUniformFloatValue(\n      U.PARTICLE_COUNT_SQRT,\n      this.particleCountSqrt_,\n    );\n\n    const rotation = this.tempVec2_;\n    rotation[0] = Math.cos(frameState.viewState.rotation);\n    rotation[1] = Math.sin(frameState.viewState.rotation);\n    this.helper.setUniformFloatVec2(U.ROTATION, rotation);\n\n    this.helper.setUniformFloatValue(U.MAX_SPEED, this.maxSpeed_);\n\n    gl.drawArrays(gl.POINTS, 0, particleCount);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  updateParticlePositions_(frameState) {\n    const helper = this.helper;\n    const gl = helper.getGL();\n\n    helper.useProgram(this.particlePositionProgram_);\n    gl.viewport(0, 0, this.particleCountSqrt_, this.particleCountSqrt_);\n    helper.bindFrameBuffer(this.framebuffer_, this.nextPositionTexture_);\n\n    helper.bindTexture(this.previousPositionTexture_, 0, U.POSITION_TEXTURE);\n    helper.bindTexture(this.velocityTexture_, 1, U.VELOCITY_TEXTURE);\n    helper.bindAttribute(this.quadBuffer_, A.POSITION, 2);\n\n    helper.setUniformFloatValue(U.RANDOM_SEED, Math.random());\n    helper.setUniformFloatValue(U.SPEED_FACTOR, this.speedFactor_);\n    helper.setUniformFloatValue(U.DROP_RATE, this.dropRate_);\n    helper.setUniformFloatValue(U.DROP_RATE_BUMP, this.dropRateBump_);\n\n    const rotation = this.tempVec2_;\n    rotation[0] = Math.cos(frameState.viewState.rotation);\n    rotation[1] = Math.sin(frameState.viewState.rotation);\n    this.helper.setUniformFloatVec2(U.ROTATION, rotation);\n\n    const size = frameState.size;\n    this.helper.setUniformFloatVec2(U.VIEWPORT_SIZE_PX, [size[0], size[1]]);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    const current = this.nextPositionTexture_;\n    this.nextPositionTexture_ = this.previousPositionTexture_;\n    this.previousPositionTexture_ = current;\n  }\n}\n\nexport default FlowLayerRenderer;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,gBAAgB,MAAM,uBAAuB;AACpD,OAAOC,sBAAsB,MAAM,gBAAgB;AACnD,SAAQC,YAAY,EAAEC,WAAW,QAAO,gBAAgB;AACxD,SAAQC,cAAc,QAAO,uBAAuB;;AAEpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,CAAC,GAAG;EACfC,OAAO,EAAE,WAAW;EACpBC,gBAAgB,EAAE,mBAAmB;EACrCC,gBAAgB,EAAE,mBAAmB;EACrCC,mBAAmB,EAAE,qBAAqB;EAC1CC,SAAS,EAAE,YAAY;EACvBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,UAAU;EAClBC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,cAAc;EAC3BC,YAAY,EAAE,eAAe;EAC7BC,SAAS,EAAE,YAAY;EACvBC,cAAc,EAAE,gBAAgB;EAChCC,OAAO,EAAE,WAAW;EACpBC,QAAQ,EAAEf,cAAc,CAACe,QAAQ;EACjCC,gBAAgB,EAAEhB,cAAc,CAACgB;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,CAAC,GAAG;EACfC,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,CAAC,GAAG;EACfF,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMG,iBAAiB,SAASxB,sBAAsB,CAAC;EACrD;AACF;AACA;AACA;EACEyB,WAAWA,CAACC,KAAK,EAAEC,OAAO,EAAE;IAC1B,KAAK,CAACD,KAAK,EAAE;MACXE,YAAY,EAAED,OAAO,CAACE,gBAAgB;MACtCC,cAAc,EAAEH,OAAO,CAACI,kBAAkB;MAC1CC,SAAS,EAAEL,OAAO,CAACK,SAAS;MAC5B;MACA;MACAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;MACnBC,QAAQ,EAAE;QACR,CAAC9B,CAAC,CAACK,SAAS,GAAGkB,OAAO,CAACQ;MACzB;IACF,CAAC,CAAC;;IAEF;AACJ;AACA;AACA;IACI,IAAI,CAACC,4BAA4B,GAAGT,OAAO,CAACU,2BAA2B;;IAEvE;AACJ;AACA;AACA;IACI,IAAI,CAACC,gBAAgB,GAAG,IAAI;;IAE5B;AACJ;AACA;AACA;IACI,IAAI,CAACC,kBAAkB,GAAGZ,OAAO,CAACa,SAAS,GACvCC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,IAAI,CAAChB,OAAO,CAACa,SAAS,CAAC,CAAC,GACvC,GAAG;;IAEP;AACJ;AACA;AACA;IACI,IAAI,CAACI,oBAAoB;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW;;IAEhB;AACJ;AACA;AACA;IACI,IAAI,CAACC,wBAAwB;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,6BAA6B,GAAGpB,OAAO,CAACqB,4BAA4B;;IAEzE;AACJ;AACA;AACA;IACI,IAAI,CAACC,+BAA+B,GAClCtB,OAAO,CAACuB,8BAA8B;;IAExC;AACJ;AACA;AACA;IACI,IAAI,CAACC,wBAAwB;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,oBAAoB;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,qBAAqB;;IAE1B;AACJ;AACA;AACA;IACI,IAAI,CAACC,0BAA0B,GAAG3B,OAAO,CAAC4B,yBAAyB;;IAEnE;AACJ;AACA;AACA;IACI,IAAI,CAACnB,4BAA4B,GAAGT,OAAO,CAACU,2BAA2B;;IAEvE;AACJ;AACA;AACA;IACI,IAAI,CAACmB,eAAe;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,oBAAoB,GAAG9B,OAAO,CAAC+B,mBAAmB;;IAEvD;AACJ;AACA;AACA;IACI,IAAI,CAACC,sBAAsB,GAAGhC,OAAO,CAACiC,qBAAqB;;IAE3D;AACJ;AACA;AACA;IACI,IAAI,CAACC,sBAAsB;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,kBAAkB;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GAAG,KAAK,CAAC,CAAC;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGrC,OAAO,CAACQ,QAAQ;;IAEjC;AACJ;AACA;AACA;IACI,IAAI,CAAC8B,YAAY,GAAGtC,OAAO,CAACuC,WAAW,IAAI,KAAK;;IAEhD;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC,CAAC;;IAExB;AACJ;AACA;AACA;IACI,IAAI,CAACC,aAAa,GAAG,IAAI,CAAC,CAAC;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAG,CAAC;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAG,CAAC;EAC1B;;EAEA;AACF;AACA;EACEC,kBAAkBA,CAAA,EAAG;IACnB,KAAK,CAACA,kBAAkB,CAAC,CAAC;IAC1B,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,MAAMC,EAAE,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;IACzB,IAAI,CAACC,YAAY,GAAGF,EAAE,CAACG,iBAAiB,CAAC,CAAC;IAE1C,MAAMC,aAAa,GAAG,IAAI,CAACvC,kBAAkB,GAAG,IAAI,CAACA,kBAAkB;IACvE,MAAMwC,eAAe,GAAG,IAAIC,YAAY,CAACF,aAAa,CAAC;IACvD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,aAAa,EAAE,EAAEG,CAAC,EAAE;MACtCF,eAAe,CAACE,CAAC,CAAC,GAAGA,CAAC;IACxB;IACA,MAAMC,mBAAmB,GAAG,IAAInF,gBAAgB,CAACE,YAAY,EAAEC,WAAW,CAAC;IAC3EgF,mBAAmB,CAACC,QAAQ,CAACJ,eAAe,CAAC;IAC7CN,MAAM,CAACW,eAAe,CAACF,mBAAmB,CAAC;IAC3C,IAAI,CAACtC,oBAAoB,GAAGsC,mBAAmB;IAE/C,MAAMG,WAAW,GAAG,IAAIL,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1E,MAAMM,UAAU,GAAG,IAAIvF,gBAAgB,CAACE,YAAY,EAAEC,WAAW,CAAC;IAClEoF,UAAU,CAACH,QAAQ,CAACE,WAAW,CAAC;IAChCZ,MAAM,CAACW,eAAe,CAACE,UAAU,CAAC;IAClC,IAAI,CAACzC,WAAW,GAAGyC,UAAU;IAE7B,MAAMC,iBAAiB,GAAG,IAAIC,UAAU,CAACV,aAAa,GAAG,CAAC,CAAC;IAC3D,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,iBAAiB,CAACE,MAAM,EAAE,EAAER,CAAC,EAAE;MACjDM,iBAAiB,CAACN,CAAC,CAAC,GAAGxC,IAAI,CAACiD,KAAK,CAACjD,IAAI,CAACkD,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IACxD;IAEA,IAAI,CAACxC,wBAAwB,GAAGsB,MAAM,CAACmB,aAAa,CAClD,CAAC,IAAI,CAACrD,kBAAkB,EAAE,IAAI,CAACA,kBAAkB,CAAC,EAClDgD,iBAAiB,EACjB,IAAI,EACJ,IACF,CAAC;IAED,IAAI,CAACnC,oBAAoB,GAAGqB,MAAM,CAACmB,aAAa,CAC9C,CAAC,IAAI,CAACrD,kBAAkB,EAAE,IAAI,CAACA,kBAAkB,CAAC,EAClDgD,iBAAiB,EACjB,IAAI,EACJ,IACF,CAAC;IAED,IAAI,CAACzC,wBAAwB,GAAG2B,MAAM,CAACoB,UAAU,CAC/C,IAAI,CAAC5C,+BAA+B,EACpC,IAAI,CAACF,6BACP,CAAC;IAED,IAAI,CAACM,qBAAqB,GAAGoB,MAAM,CAACoB,UAAU,CAC5C,IAAI,CAACzD,4BAA4B,EACjC,IAAI,CAACkB,0BACP,CAAC;IAED,IAAI,CAACE,eAAe,GAAGiB,MAAM,CAACoB,UAAU,CACtC,IAAI,CAAClC,sBAAsB,EAC3B,IAAI,CAACF,oBACP,CAAC;EACH;EAEAqC,4BAA4BA,CAAA,EAAG;IAC7B,MAAMrB,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,EAAE,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;IACzB,MAAMoB,MAAM,GAAGtB,MAAM,CAACuB,SAAS,CAAC,CAAC;IACjC,MAAMC,WAAW,GAAGF,MAAM,CAACG,KAAK;IAChC,MAAMC,YAAY,GAAGJ,MAAM,CAACK,MAAM;IAElC,MAAMC,KAAK,GAAG,IAAIb,UAAU,CAACS,WAAW,GAAGE,YAAY,GAAG,CAAC,CAAC;IAE5D,IAAI,IAAI,CAACrC,kBAAkB,EAAE;MAC3BY,EAAE,CAAC4B,aAAa,CAAC,IAAI,CAACxC,kBAAkB,CAAC;IAC3C;IACA,IAAI,CAACA,kBAAkB,GAAGW,MAAM,CAACmB,aAAa,CAC5C,CAACK,WAAW,EAAEE,YAAY,CAAC,EAC3BE,KAAK,EACL,IAAI,EACJ,IACF,CAAC;IAED,IAAI,IAAI,CAACxC,sBAAsB,EAAE;MAC/Ba,EAAE,CAAC4B,aAAa,CAAC,IAAI,CAACzC,sBAAsB,CAAC;IAC/C;IACA,IAAI,CAACA,sBAAsB,GAAGY,MAAM,CAACmB,aAAa,CAChD,CAACK,WAAW,EAAEE,YAAY,CAAC,EAC3BE,KAAK,EACL,IAAI,EACJ,IACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;EACEE,cAAcA,CAACC,UAAU,EAAE;IACzB,MAAM/B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,EAAE,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;IACzB,MAAMoB,MAAM,GAAGtB,MAAM,CAACuB,SAAS,CAAC,CAAC;IACjC,MAAMC,WAAW,GAAGF,MAAM,CAACG,KAAK;IAChC,MAAMC,YAAY,GAAGJ,MAAM,CAACK,MAAM;IAElC,IACE,IAAI,CAAC9B,cAAc,IAAI2B,WAAW,IAClC,IAAI,CAAC1B,eAAe,IAAI4B,YAAY,EACpC;MACA,IAAI,CAACL,4BAA4B,CAAC,CAAC;IACrC;IAEA,MAAMW,IAAI,GAAG,CAACR,WAAW,EAAEE,YAAY,CAAC;;IAExC;IACA,IAAI,CAAC7D,gBAAgB,GAAGmC,MAAM,CAACmB,aAAa,CAC1Ca,IAAI,EACJ,IAAI,EACJ,IAAI,CAACnE,gBACP,CAAC;IACDoC,EAAE,CAACgC,cAAc,CACfhC,EAAE,CAACiC,UAAU,EACb,CAAC,EACDjC,EAAE,CAACkC,IAAI,EACP,CAAC,EACD,CAAC,EACDX,WAAW,EACXE,YAAY,EACZ,CACF,CAAC;IAED,IAAI,CAACU,mBAAmB,CAACL,UAAU,CAAC;IACpC,IAAI,CAACM,wBAAwB,CAACN,UAAU,CAAC;IAEzCA,UAAU,CAACO,OAAO,GAAG,IAAI;IACzB,IAAI,CAACzC,cAAc,GAAG2B,WAAW;IACjC,IAAI,CAAC1B,eAAe,GAAG4B,YAAY;EACrC;;EAEA;AACF;AACA;EACEU,mBAAmBA,CAACL,UAAU,EAAE;IAC9B,MAAM/B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,EAAE,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;IAEzBF,MAAM,CAACuC,eAAe,CAAC,IAAI,CAACpC,YAAY,EAAE,IAAI,CAACd,kBAAkB,CAAC;IAElE,IAAI,CAACmD,YAAY,CAAC,IAAI,CAACpD,sBAAsB,EAAE,IAAI,CAACE,YAAY,CAAC;IACjE,IAAI,CAACmD,kBAAkB,CAACV,UAAU,CAAC;IAEnC/B,MAAM,CAAC0C,sBAAsB,CAAC,CAAC;IAC/BzC,EAAE,CAAC0C,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACjC1C,EAAE,CAAC2C,KAAK,CAAC3C,EAAE,CAAC4C,gBAAgB,CAAC;IAE7B5C,EAAE,CAAC6C,MAAM,CAAC7C,EAAE,CAAC8C,KAAK,CAAC;IACnB9C,EAAE,CAAC+C,SAAS,CAAC/C,EAAE,CAACgD,SAAS,EAAEhD,EAAE,CAACiD,mBAAmB,CAAC;IAClD,IAAI,CAACV,YAAY,CAAC,IAAI,CAACnD,kBAAkB,EAAE,CAAC,CAAC;IAC7CY,EAAE,CAACkD,OAAO,CAAClD,EAAE,CAAC8C,KAAK,CAAC;IAEpB,MAAMK,OAAO,GAAG,IAAI,CAAC/D,kBAAkB;IACvC,IAAI,CAACA,kBAAkB,GAAG,IAAI,CAACD,sBAAsB;IACrD,IAAI,CAACA,sBAAsB,GAAGgE,OAAO;EACvC;;EAEA;AACF;AACA;AACA;EACEZ,YAAYA,CAACa,OAAO,EAAEC,OAAO,EAAE;IAC7B,MAAMtD,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,EAAE,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;IAEzBF,MAAM,CAACuD,UAAU,CAAC,IAAI,CAACxE,eAAe,CAAC;IACvCiB,MAAM,CAACwD,WAAW,CAACH,OAAO,EAAE,CAAC,EAAE1H,CAAC,CAACC,OAAO,CAAC;IACzCoE,MAAM,CAACyD,aAAa,CAAC,IAAI,CAACrF,WAAW,EAAEzB,CAAC,CAACC,QAAQ,EAAE,CAAC,CAAC;IACrD,IAAI,CAACoD,MAAM,CAAC0D,oBAAoB,CAAC/H,CAAC,CAACa,OAAO,EAAE8G,OAAO,CAAC;IAEpDrD,EAAE,CAAC0D,UAAU,CAAC1D,EAAE,CAAC2D,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;EACnC;;EAEA;AACF;AACA;EACEnB,kBAAkBA,CAACV,UAAU,EAAE;IAC7B,MAAM/B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,EAAE,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;IAEzBF,MAAM,CAACuD,UAAU,CAAC,IAAI,CAAC3E,qBAAqB,CAAC;IAE7C,MAAMyB,aAAa,GAAG,IAAI,CAACvC,kBAAkB,GAAG,IAAI,CAACA,kBAAkB;IAEvEkC,MAAM,CAACyD,aAAa,CAAC,IAAI,CAACtF,oBAAoB,EAAExB,CAAC,CAACE,KAAK,EAAE,CAAC,CAAC;IAE3DmD,MAAM,CAACwD,WAAW,CAAC,IAAI,CAAC9E,wBAAwB,EAAE,CAAC,EAAE/C,CAAC,CAACG,gBAAgB,CAAC;IACxEkE,MAAM,CAACwD,WAAW,CAAC,IAAI,CAAC3F,gBAAgB,EAAE,CAAC,EAAElC,CAAC,CAACE,gBAAgB,CAAC;IAEhE,IAAI,CAACmE,MAAM,CAAC0D,oBAAoB,CAC9B/H,CAAC,CAACI,mBAAmB,EACrB,IAAI,CAAC+B,kBACP,CAAC;IAED,MAAM+F,QAAQ,GAAG,IAAI,CAACjE,SAAS;IAC/BiE,QAAQ,CAAC,CAAC,CAAC,GAAG7F,IAAI,CAAC8F,GAAG,CAAC/B,UAAU,CAACgC,SAAS,CAACF,QAAQ,CAAC;IACrDA,QAAQ,CAAC,CAAC,CAAC,GAAG7F,IAAI,CAACgG,GAAG,CAACjC,UAAU,CAACgC,SAAS,CAACF,QAAQ,CAAC;IACrD,IAAI,CAAC7D,MAAM,CAACiE,mBAAmB,CAACtI,CAAC,CAACc,QAAQ,EAAEoH,QAAQ,CAAC;IAErD,IAAI,CAAC7D,MAAM,CAAC0D,oBAAoB,CAAC/H,CAAC,CAACK,SAAS,EAAE,IAAI,CAACuD,SAAS,CAAC;IAE7DU,EAAE,CAAC0D,UAAU,CAAC1D,EAAE,CAACiE,MAAM,EAAE,CAAC,EAAE7D,aAAa,CAAC;EAC5C;;EAEA;AACF;AACA;EACEgC,wBAAwBA,CAACN,UAAU,EAAE;IACnC,MAAM/B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,EAAE,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;IAEzBF,MAAM,CAACuD,UAAU,CAAC,IAAI,CAAClF,wBAAwB,CAAC;IAChD4B,EAAE,CAACkE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACrG,kBAAkB,EAAE,IAAI,CAACA,kBAAkB,CAAC;IACnEkC,MAAM,CAACuC,eAAe,CAAC,IAAI,CAACpC,YAAY,EAAE,IAAI,CAACxB,oBAAoB,CAAC;IAEpEqB,MAAM,CAACwD,WAAW,CAAC,IAAI,CAAC9E,wBAAwB,EAAE,CAAC,EAAE/C,CAAC,CAACG,gBAAgB,CAAC;IACxEkE,MAAM,CAACwD,WAAW,CAAC,IAAI,CAAC3F,gBAAgB,EAAE,CAAC,EAAElC,CAAC,CAACE,gBAAgB,CAAC;IAChEmE,MAAM,CAACyD,aAAa,CAAC,IAAI,CAACrF,WAAW,EAAEzB,CAAC,CAACC,QAAQ,EAAE,CAAC,CAAC;IAErDoD,MAAM,CAAC0D,oBAAoB,CAAC/H,CAAC,CAACS,WAAW,EAAE4B,IAAI,CAACkD,MAAM,CAAC,CAAC,CAAC;IACzDlB,MAAM,CAAC0D,oBAAoB,CAAC/H,CAAC,CAACU,YAAY,EAAE,IAAI,CAACmD,YAAY,CAAC;IAC9DQ,MAAM,CAAC0D,oBAAoB,CAAC/H,CAAC,CAACW,SAAS,EAAE,IAAI,CAACoD,SAAS,CAAC;IACxDM,MAAM,CAAC0D,oBAAoB,CAAC/H,CAAC,CAACY,cAAc,EAAE,IAAI,CAACoD,aAAa,CAAC;IAEjE,MAAMkE,QAAQ,GAAG,IAAI,CAACjE,SAAS;IAC/BiE,QAAQ,CAAC,CAAC,CAAC,GAAG7F,IAAI,CAAC8F,GAAG,CAAC/B,UAAU,CAACgC,SAAS,CAACF,QAAQ,CAAC;IACrDA,QAAQ,CAAC,CAAC,CAAC,GAAG7F,IAAI,CAACgG,GAAG,CAACjC,UAAU,CAACgC,SAAS,CAACF,QAAQ,CAAC;IACrD,IAAI,CAAC7D,MAAM,CAACiE,mBAAmB,CAACtI,CAAC,CAACc,QAAQ,EAAEoH,QAAQ,CAAC;IAErD,MAAM7B,IAAI,GAAGD,UAAU,CAACC,IAAI;IAC5B,IAAI,CAAChC,MAAM,CAACiE,mBAAmB,CAACtI,CAAC,CAACe,gBAAgB,EAAE,CAACsF,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvE/B,EAAE,CAAC0D,UAAU,CAAC1D,EAAE,CAAC2D,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;IAEjC,MAAMR,OAAO,GAAG,IAAI,CAACzE,oBAAoB;IACzC,IAAI,CAACA,oBAAoB,GAAG,IAAI,CAACD,wBAAwB;IACzD,IAAI,CAACA,wBAAwB,GAAG0E,OAAO;EACzC;AACF;AAEA,eAAerG,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}