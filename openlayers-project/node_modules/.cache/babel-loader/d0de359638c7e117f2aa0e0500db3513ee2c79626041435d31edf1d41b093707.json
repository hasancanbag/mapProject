{"ast":null,"code":"/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\nconst tempExtent = [0, 0, 0, 0];\nconst tempSegment = [];\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {Feature} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  constructor(type, features, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super(/** @type {import(\"./Pointer.js\").Options} */options);\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n    this.un;\n\n    /** @private */\n    this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.featuresBeingModified_ = null;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_.bind(this),\n      'LineString': this.writeLineStringGeometry_.bind(this),\n      'LinearRing': this.writeLineStringGeometry_.bind(this),\n      'Polygon': this.writePolygonGeometry_.bind(this),\n      'MultiPoint': this.writeMultiPointGeometry_.bind(this),\n      'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),\n      'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),\n      'Circle': this.writeCircleGeometry_.bind(this),\n      'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this)\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     * @private\n     */\n    this.hitDetection_ = null;\n\n    /** @type {Collection<Feature>} */\n    let features;\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      this.source_.addEventListener(VectorEventType.ADDFEATURE, this.handleSourceAdd_.bind(this));\n      this.source_.addEventListener(VectorEventType.REMOVEFEATURE, this.handleSourceRemove_.bind(this));\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features, a source or a layer');\n    }\n    if (options.hitDetection) {\n      this.hitDetection_ = options.hitDetection;\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n    this.features_.forEach(this.addFeature_.bind(this));\n    this.features_.addEventListener(CollectionEventType.ADD, this.handleFeatureAdd_.bind(this));\n    this.features_.addEventListener(CollectionEventType.REMOVE, this.handleFeatureRemove_.bind(this));\n\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     * @private\n     */\n    this.delta_ = [0, 0];\n\n    /**\n     * @private\n     */\n    this.snapToPointer_ = options.snapToPointer === undefined ? !this.hitDetection_ : options.snapToPointer;\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n  willModifyFeatures_(evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      const features = this.featuresBeingModified_.getArray();\n      for (let i = 0, ii = segments.length; i < ii; ++i) {\n        const segment = segments[i];\n        for (let s = 0, ss = segment.length; s < ss; ++s) {\n          const feature = segment[s].feature;\n          if (feature && !features.includes(feature)) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of candidate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    const nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      const nodeToRemove = nodesToRemove[i];\n      for (let j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   * @override\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(evt.element);\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    this.removeFeature_(evt.element);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n\n    /** @type {SegmentData} */\n    const segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          const segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n\n    /** @type {SegmentData} */\n    const centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n\n    /** @type {SegmentData} */\n    const circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    let circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */\n    geometry;\n    const userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      const projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = fromCircle(/** @type {import(\"../geom/Circle.js\").default} */circleGeometry).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      const geometry = geometries[i];\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      writer(feature, geometry);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<Feature>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates, features, geometries) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n    let handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @override\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n    const vertex = [evt.coordinate[0] + this.delta_[0], evt.coordinate[1] + this.delta_[1]];\n    const features = [];\n    const geometries = [];\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const feature = segmentData.feature;\n      if (!features.includes(feature)) {\n        features.push(feature);\n      }\n      const geometry = segmentData.geometry;\n      if (!geometries.includes(geometry)) {\n        geometries.push(geometry);\n      }\n      const depth = segmentData.depth;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Circle':\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            const projection = evt.map.getView().getProjection();\n            let radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n            const userProjection = getUserProjection();\n            if (userProjection) {\n              const circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    const pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const projection = evt.map.getView().getProjection();\n      const insertVertices = [];\n      const vertex = vertexFeature.getGeometry().getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.geometry);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === 'Circle' && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          if (componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            let coordinates = segmentDataMatch.geometry.getCoordinates();\n            switch (segmentDataMatch.geometry.getType()) {\n              // prevent dragging closed linestrings by the connecting node\n              case 'LineString':\n              case 'MultiLineString':\n                continue;\n              // if dragging the first vertex of a polygon, ensure the other segment\n              // belongs to the closing vertex of the linear ring\n              case 'MultiPolygon':\n                coordinates = coordinates[depth[1]];\n              /* falls through */\n              case 'Polygon':\n                if (segmentDataMatch.index !== coordinates[depth[0]].length - 2) {\n                  continue;\n                }\n                break;\n              default:\n              // pass\n            }\n          }\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === 'Circle') {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        let circleGeometry = geometry;\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          const projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n        }\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../Map.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [coordinate] The pixel Coordinate.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map, coordinate) {\n    const pixelCoordinate = coordinate || map.getCoordinateFromPixel(pixel);\n    const projection = map.getView().getProjection();\n    const sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n\n    /** @type {Array<SegmentData>|undefined} */\n    let nodes;\n    /** @type {Point|undefined} */\n    let hitPointGeometry;\n    if (this.hitDetection_) {\n      const layerFilter = typeof this.hitDetection_ === 'object' ? layer => layer === this.hitDetection_ : undefined;\n      map.forEachFeatureAtPixel(pixel, (feature, layer, geometry) => {\n        if (geometry && geometry.getType() === 'Point') {\n          geometry = new Point(toUserCoordinate(geometry.getCoordinates(), projection));\n        }\n        const geom = geometry || feature.getGeometry();\n        if (feature instanceof Feature && this.features_.getArray().includes(feature)) {\n          hitPointGeometry = /** @type {Point} */geom;\n          const coordinate = /** @type {Point} */feature.getGeometry().getFlatCoordinates().slice(0, 2);\n          nodes = [{\n            feature,\n            geometry: hitPointGeometry,\n            segment: [coordinate, coordinate]\n          }];\n        }\n        return true;\n      }, {\n        layerFilter\n      });\n    }\n    if (!nodes) {\n      const viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n      const buffer = map.getView().getResolution() * this.pixelTolerance_;\n      const box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n      nodes = this.rBush_.getInExtent(box);\n    }\n    if (nodes && nodes.length > 0) {\n      const node = nodes.sort(sortByDistance)[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n        if (node.geometry.getType() === 'Circle' && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n          const geometries = {};\n          geometries[getUid(node.geometry)] = true;\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              const geometryUid = getUid(nodes[i].geometry);\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = segmentData.index;\n    let coordinates;\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n\n    /** @type {SegmentData} */\n    const newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    /** @type {SegmentData} */\n    const newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      const removed = this.removeVertex_();\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      }\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          const newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  }\n}\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n  if (geometry.getType() === 'Circle') {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      }\n      const distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      const distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n  if (geometry.getType() === 'Circle' && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n    }\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\nexport default Modify;","map":{"version":3,"names":["Collection","CollectionEventType","Event","EventType","Feature","MapBrowserEventType","Point","PointerInteraction","RBush","VectorEventType","VectorLayer","VectorSource","altKeyOnly","always","primaryAction","singleClick","boundingExtent","buffer","bufferExtent","createOrUpdateFromCoordinate","createExtent","closestOnSegment","distance","coordinateDistance","equals","coordinatesEqual","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","fromCircle","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","getUid","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","tempExtent","tempSegment","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","constructor","type","features","mapBrowserEvent","Modify","options","on","once","un","boundHandleFeatureChange_","handleFeatureChange_","bind","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","featuresBeingModified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","hitDetection_","getFeatures","addEventListener","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","hitDetection","features_","forEach","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","delta_","snapToPointer_","snapToPointer","feature","geometry","getGeometry","writer","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","willModifyFeatures_","evt","segments","getArray","i","ii","length","segment","s","ss","includes","push","getLength","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getSource","removeFeature","removeEventListener","rBush","nodesToRemove","node","nodeToRemove","j","splice","remove","setActive","active","setMap","getOverlay","event","element","target","coordinates","getCoordinates","segmentData","insert","getExtent","points","depth","index","slice","lines","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","circleGeometry","userProjection","projection","getView","getProjection","clone","transform","geometries","getGeometriesArray","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","set","handleEvent","originalEvent","handled","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","setCenter","radius","setRadius","getRadius","setGeometryCoordinates_","handleDownEvent","pixelCoordinate","pixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","Array","closestVertex","closestOnSegmentData","insertVertex_","handleUpEvent","update","getCoordinateFromPixel","sortByDistance","a","b","projectedDistanceToSegmentDataSquared","nodes","hitPointGeometry","layerFilter","layer","forEachFeatureAtPixel","geom","getFlatCoordinates","viewExtent","getResolution","box","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","geometryUid","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removed","removeVertex_","dragSegments","segmentsByFeature","deleted","component","left","newIndex","right","pop","delta","forEachInExtent","pointCoordinates","distanceToCenterSquared","distanceToCircumference","getClosestPoint","resolution"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/interaction/Modify.js"],"sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {\n  altKeyOnly,\n  always,\n  primaryAction,\n  singleClick,\n} from '../events/condition.js';\nimport {\n  boundingExtent,\n  buffer as bufferExtent,\n  createOrUpdateFromCoordinate as createExtent,\n} from '../extent.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  equals as coordinatesEqual,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {equals} from '../array.js';\nimport {fromCircle} from '../geom/Polygon.js';\nimport {\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from '../proj.js';\nimport {getUid} from '../util.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\nconst tempExtent = [0, 0, 0, 0];\nconst tempSegment = [];\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend',\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {Feature} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  constructor(type, features, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n    this.un;\n\n    /** @private */\n    this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition\n      ? options.deleteCondition\n      : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition\n      ? options.insertVertexCondition\n      : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.featuresBeingModified_ = null;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_.bind(this),\n      'LineString': this.writeLineStringGeometry_.bind(this),\n      'LinearRing': this.writeLineStringGeometry_.bind(this),\n      'Polygon': this.writePolygonGeometry_.bind(this),\n      'MultiPoint': this.writeMultiPointGeometry_.bind(this),\n      'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),\n      'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),\n      'Circle': this.writeCircleGeometry_.bind(this),\n      'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     * @private\n     */\n    this.hitDetection_ = null;\n\n    /** @type {Collection<Feature>} */\n    let features;\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      this.source_.addEventListener(\n        VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_.bind(this),\n      );\n      this.source_.addEventListener(\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_.bind(this),\n      );\n    }\n    if (!features) {\n      throw new Error(\n        'The modify interaction requires features, a source or a layer',\n      );\n    }\n    if (options.hitDetection) {\n      this.hitDetection_ = options.hitDetection;\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    this.features_.addEventListener(\n      CollectionEventType.ADD,\n      this.handleFeatureAdd_.bind(this),\n    );\n    this.features_.addEventListener(\n      CollectionEventType.REMOVE,\n      this.handleFeatureRemove_.bind(this),\n    );\n\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     * @private\n     */\n    this.delta_ = [0, 0];\n\n    /**\n     * @private\n     */\n    this.snapToPointer_ =\n      options.snapToPointer === undefined\n        ? !this.hitDetection_\n        : options.snapToPointer;\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n  willModifyFeatures_(evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      const features = this.featuresBeingModified_.getArray();\n      for (let i = 0, ii = segments.length; i < ii; ++i) {\n        const segment = segments[i];\n        for (let s = 0, ss = segment.length; s < ss; ++s) {\n          const feature = segment[s].feature;\n          if (feature && !features.includes(feature)) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYSTART,\n            this.featuresBeingModified_,\n            evt,\n          ),\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of candidate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(\n      EventType.CHANGE,\n      this.boundHandleFeatureChange_,\n    );\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    const nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function (node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      },\n    );\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      const nodeToRemove = nodesToRemove[i];\n      for (let j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   * @override\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(evt.element);\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<Feature>} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    this.removeFeature_(evt.element);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n\n    /** @type {SegmentData} */\n    const segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates],\n    };\n\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates],\n      };\n\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment,\n      };\n\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          const segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment,\n          };\n\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n\n    /** @type {SegmentData} */\n    const centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    /** @type {SegmentData} */\n    const circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    let circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      const projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry\n        .clone()\n        .transform(userProjection, projection);\n      circleGeometry = fromCircle(\n        /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry),\n      ).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      const geometry = geometries[i];\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      writer(feature, geometry);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<Feature>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates, features, geometries) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (\n      !mapBrowserEvent.map.getView().getInteracting() &&\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (\n        mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n        !this.ignoreNextSingleClick_\n      ) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @override\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n\n    const vertex = [\n      evt.coordinate[0] + this.delta_[0],\n      evt.coordinate[1] + this.delta_[1],\n    ];\n    const features = [];\n    const geometries = [];\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const feature = segmentData.feature;\n      if (!features.includes(feature)) {\n        features.push(feature);\n      }\n      const geometry = segmentData.geometry;\n      if (!geometries.includes(geometry)) {\n        geometries.push(geometry);\n      }\n      const depth = segmentData.depth;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Circle':\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            const projection = evt.map.getView().getProjection();\n            let radius = coordinateDistance(\n              fromUserCoordinate(geometry.getCenter(), projection),\n              fromUserCoordinate(vertex, projection),\n            );\n            const userProjection = getUserProjection();\n            if (userProjection) {\n              const circleGeometry = geometry\n                .clone()\n                .transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry\n                .transform(projection, userProjection)\n                .getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    const pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const projection = evt.map.getView().getProjection();\n      const insertVertices = [];\n      const vertex = vertexFeature.getGeometry().getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.geometry);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (\n          segmentDataMatch.geometry.getType() === 'Circle' &&\n          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          const closestVertex = closestOnSegmentData(\n            pixelCoordinate,\n            segmentDataMatch,\n            projection,\n          );\n          if (\n            coordinatesEqual(closestVertex, vertex) &&\n            !componentSegments[uid][0]\n          ) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[0], vertex) &&\n          !componentSegments[uid][0]\n        ) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[1], vertex) &&\n          !componentSegments[uid][1]\n        ) {\n          if (\n            componentSegments[uid][0] &&\n            componentSegments[uid][0].index === 0\n          ) {\n            let coordinates = segmentDataMatch.geometry.getCoordinates();\n            switch (segmentDataMatch.geometry.getType()) {\n              // prevent dragging closed linestrings by the connecting node\n              case 'LineString':\n              case 'MultiLineString':\n                continue;\n              // if dragging the first vertex of a polygon, ensure the other segment\n              // belongs to the closing vertex of the linear ring\n              case 'MultiPolygon':\n                coordinates = coordinates[depth[1]];\n              /* falls through */\n              case 'Polygon':\n                if (\n                  segmentDataMatch.index !==\n                  coordinates[depth[0]].length - 2\n                ) {\n                  continue;\n                }\n                break;\n              default:\n              // pass\n            }\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          getUid(segment) in this.vertexSegments_ &&\n          !componentSegments[uid][0] &&\n          !componentSegments[uid][1] &&\n          this.insertVertexCondition_(evt)\n        ) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === 'Circle') {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        let circleGeometry = geometry;\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          const projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry\n            .clone()\n            .transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(\n            projection,\n            userProjection,\n          );\n        }\n        this.rBush_.update(\n          circleGeometry.getExtent(),\n          circumferenceSegmentData,\n        );\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(\n        new ModifyEvent(\n          ModifyEventType.MODIFYEND,\n          this.featuresBeingModified_,\n          evt,\n        ),\n      );\n      this.featuresBeingModified_ = null;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../Map.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [coordinate] The pixel Coordinate.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map, coordinate) {\n    const pixelCoordinate = coordinate || map.getCoordinateFromPixel(pixel);\n    const projection = map.getView().getProjection();\n    const sortByDistance = function (a, b) {\n      return (\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection)\n      );\n    };\n\n    /** @type {Array<SegmentData>|undefined} */\n    let nodes;\n    /** @type {Point|undefined} */\n    let hitPointGeometry;\n    if (this.hitDetection_) {\n      const layerFilter =\n        typeof this.hitDetection_ === 'object'\n          ? (layer) => layer === this.hitDetection_\n          : undefined;\n      map.forEachFeatureAtPixel(\n        pixel,\n        (feature, layer, geometry) => {\n          if (geometry && geometry.getType() === 'Point') {\n            geometry = new Point(\n              toUserCoordinate(geometry.getCoordinates(), projection),\n            );\n          }\n          const geom = geometry || feature.getGeometry();\n          if (\n            feature instanceof Feature &&\n            this.features_.getArray().includes(feature)\n          ) {\n            hitPointGeometry = /** @type {Point} */ (geom);\n            const coordinate = /** @type {Point} */ (feature.getGeometry())\n              .getFlatCoordinates()\n              .slice(0, 2);\n            nodes = [\n              {\n                feature,\n                geometry: hitPointGeometry,\n                segment: [coordinate, coordinate],\n              },\n            ];\n          }\n          return true;\n        },\n        {layerFilter},\n      );\n    }\n    if (!nodes) {\n      const viewExtent = fromUserExtent(\n        createExtent(pixelCoordinate, tempExtent),\n        projection,\n      );\n      const buffer = map.getView().getResolution() * this.pixelTolerance_;\n      const box = toUserExtent(\n        bufferExtent(viewExtent, buffer, tempExtent),\n        projection,\n      );\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      const node = nodes.sort(sortByDistance)[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n        if (\n          node.geometry.getType() === 'Circle' &&\n          node.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry],\n          );\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex =\n              squaredDist1 > squaredDist2\n                ? closestSegment[1]\n                : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(\n            vertex,\n            [node.feature],\n            [node.geometry],\n          );\n          const geometries = {};\n          geometries[getUid(node.geometry)] = true;\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if (\n              (coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1])) ||\n              (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0]))\n            ) {\n              const geometryUid = getUid(nodes[i].geometry);\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = segmentData.index;\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n\n    /** @type {SegmentData} */\n    const newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    /** @type {SegmentData} */\n    const newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (\n      this.lastPointerEvent_ &&\n      this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG\n    ) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      const removed = this.removeVertex_();\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(\n          new ModifyEvent(\n            ModifyEventType.MODIFYEND,\n            this.featuresBeingModified_,\n            evt,\n          ),\n        );\n      }\n\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          const newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments,\n          };\n\n          this.rBush_.insert(\n            boundingExtent(newSegmentData.segment),\n            newSegmentData,\n          );\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(\n      geometry.getExtent(),\n      function (segmentDataMatch) {\n        if (\n          segmentDataMatch.geometry === geometry &&\n          (depth === undefined ||\n            segmentDataMatch.depth === undefined ||\n            equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index\n        ) {\n          segmentDataMatch.index += delta;\n        }\n      },\n    );\n  }\n}\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(\n  pointCoordinates,\n  segmentData,\n  projection,\n) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle') {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = circleGeometry\n          .clone()\n          .transform(userProjection, projection);\n      }\n      const distanceToCenterSquared = squaredCoordinateDistance(\n        circleGeometry.getCenter(),\n        fromUserCoordinate(pointCoordinates, projection),\n      );\n      const distanceToCircumference =\n        Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n\n  if (\n    geometry.getType() === 'Circle' &&\n    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX\n  ) {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (\n      geometry\n    );\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = circleGeometry\n        .clone()\n        .transform(userProjection, projection);\n    }\n    return toUserCoordinate(\n      circleGeometry.getClosestPoint(\n        fromUserCoordinate(pointCoordinates, projection),\n      ),\n      projection,\n    );\n  }\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(\n    closestOnSegment(coordinate, tempSegment),\n    projection,\n  );\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\nexport default Modify;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,kBAAkB,MAAM,cAAc;AAC7C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SACEC,UAAU,EACVC,MAAM,EACNC,aAAa,EACbC,WAAW,QACN,wBAAwB;AAC/B,SACEC,cAAc,EACdC,MAAM,IAAIC,YAAY,EACtBC,4BAA4B,IAAIC,YAAY,QACvC,cAAc;AACrB,SACEC,gBAAgB,EAChBC,QAAQ,IAAIC,kBAAkB,EAC9BC,MAAM,IAAIC,gBAAgB,EAC1BC,eAAe,IAAIC,yBAAyB,EAC5CC,wBAAwB,QACnB,kBAAkB;AACzB,SAAQC,kBAAkB,QAAO,mBAAmB;AACpD,SAAQL,MAAM,QAAO,aAAa;AAClC,SAAQM,UAAU,QAAO,oBAAoB;AAC7C,SACEC,kBAAkB,EAClBC,cAAc,EACdC,iBAAiB,EACjBC,gBAAgB,EAChBC,YAAY,QACP,YAAY;AACnB,SAAQC,MAAM,QAAO,YAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG,CAAC;AAEpC,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC/B,MAAMC,WAAW,GAAG,EAAE;;AAEtB;AACA;AACA;AACA,MAAMC,eAAe,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEC,WAAW,EAAE,aAAa;EAC1B;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,SAAS1C,KAAK,CAAC;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;EACE2C,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,eAAe,EAAE;IAC3C,KAAK,CAACF,IAAI,CAAC;;IAEX;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAGA,QAAQ;;IAExB;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAGA,eAAe;EACxC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,SAAS1C,kBAAkB,CAAC;EACtC;AACF;AACA;EACEsC,WAAWA,CAACK,OAAO,EAAE;IACnB,KAAK,CAAC,6CAA+CA,OAAQ,CAAC;;IAE9D;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,IAAI;;IAET;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;IACA,IAAI,CAACC,yBAAyB,GAAG,IAAI,CAACC,oBAAoB,CAACC,IAAI,CAAC,IAAI,CAAC;;IAErE;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGP,OAAO,CAACQ,SAAS,GAAGR,OAAO,CAACQ,SAAS,GAAG5C,aAAa;;IAEvE;AACJ;AACA;AACA;AACA;IACI,IAAI,CAAC6C,uBAAuB,GAAG,UAAUX,eAAe,EAAE;MACxD,OAAOpC,UAAU,CAACoC,eAAe,CAAC,IAAIjC,WAAW,CAACiC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}