{"ast":null,"code":"/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\n\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport { TRUE } from '../functions.js';\nimport { get as getProjection, getUserProjection } from '../proj.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default|import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors\n * (and/or formats pre-constructed with options).\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n/**\n * @enum {string}\n */\nconst DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nexport class DragAndDropEvent extends Event {\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>} [features] Features.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   */\n  constructor(type, file, features, projection) {\n    super(type);\n\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    this.file = file;\n\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    this.projection = projection;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'addfeatures', DragAndDropEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'addfeatures', Return>} DragAndDropOnSignature\n */\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n *\n * @api\n *\n * @fires DragAndDropEvent\n */\nclass DragAndDrop extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      handleEvent: TRUE\n    });\n\n    /***\n     * @type {DragAndDropOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DragAndDropOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DragAndDropOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.readAsBuffer_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../format/Feature.js\").default>}\n     */\n    this.formats_ = [];\n    const formatConstructors = options.formatConstructors ? options.formatConstructors : [];\n    for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      let format = formatConstructors[i];\n      if (typeof format === 'function') {\n        format = new format();\n      }\n      this.formats_.push(format);\n      this.readAsBuffer_ = this.readAsBuffer_ || format.getType() === 'arraybuffer';\n    }\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = options.projection ? getProjection(options.projection) : null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.dropListenKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    this.source_ = options.source || null;\n\n    /**\n     * @private\n     * @type {HTMLElement|null}\n     */\n    this.target = options.target ? options.target : null;\n  }\n\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  handleResult_(file, event) {\n    const result = event.target.result;\n    const map = this.getMap();\n    let projection = this.projection_;\n    if (!projection) {\n      projection = getUserProjection();\n      if (!projection) {\n        const view = map.getView();\n        projection = view.getProjection();\n      }\n    }\n    let text;\n    const formats = this.formats_;\n    for (let i = 0, ii = formats.length; i < ii; ++i) {\n      const format = formats[i];\n      let input = result;\n      if (this.readAsBuffer_ && format.getType() !== 'arraybuffer') {\n        if (text === undefined) {\n          text = new TextDecoder().decode(result);\n        }\n        input = text;\n      }\n      const features = this.tryReadFeatures_(format, input, {\n        featureProjection: projection\n      });\n      if (features && features.length > 0) {\n        if (this.source_) {\n          this.source_.clear();\n          this.source_.addFeatures(features);\n        }\n        this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n        break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  registerListeners_() {\n    const map = this.getMap();\n    if (map) {\n      const dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [listen(dropArea, EventType.DROP, this.handleDrop, this), listen(dropArea, EventType.DRAGENTER, this.handleStop, this), listen(dropArea, EventType.DRAGOVER, this.handleStop, this), listen(dropArea, EventType.DROP, this.handleStop, this)];\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   * @override\n   */\n  setActive(active) {\n    if (!this.getActive() && active) {\n      this.registerListeners_();\n    }\n    if (this.getActive() && !active) {\n      this.unregisterListeners_();\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    this.unregisterListeners_();\n    super.setMap(map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  }\n\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  tryReadFeatures_(format, text, options) {\n    try {\n      return /** @type {Array<import(\"../Feature.js\").default>} */format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  }\n\n  /**\n   * @param {DragEvent} event Event.\n   */\n  handleDrop(event) {\n    const files = event.dataTransfer.files;\n    for (let i = 0, ii = files.length; i < ii; ++i) {\n      const file = files.item(i);\n      const reader = new FileReader();\n      reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n      if (this.readAsBuffer_) {\n        reader.readAsArrayBuffer(file);\n      } else {\n        reader.readAsText(file);\n      }\n    }\n  }\n\n  /**\n   * @param {DragEvent} event Event.\n   */\n  handleStop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n}\nexport default DragAndDrop;","map":{"version":3,"names":["Event","EventType","Interaction","TRUE","get","getProjection","getUserProjection","listen","unlistenByKey","DragAndDropEventType","ADD_FEATURES","DragAndDropEvent","constructor","type","file","features","projection","DragAndDrop","options","handleEvent","on","once","un","readAsBuffer_","formats_","formatConstructors","i","ii","length","format","push","getType","projection_","dropListenKeys_","source_","source","target","handleResult_","event","result","map","getMap","view","getView","text","formats","input","undefined","TextDecoder","decode","tryReadFeatures_","featureProjection","clear","addFeatures","dispatchEvent","registerListeners_","dropArea","getViewport","DROP","handleDrop","DRAGENTER","handleStop","DRAGOVER","setActive","active","getActive","unregisterListeners_","setMap","readFeatures","e","forEach","files","dataTransfer","item","reader","FileReader","addEventListener","LOAD","bind","readAsArrayBuffer","readAsText","stopPropagation","preventDefault","dropEffect"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/interaction/DragAndDrop.js"],"sourcesContent":["/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\n\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport {TRUE} from '../functions.js';\nimport {get as getProjection, getUserProjection} from '../proj.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default|import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors\n * (and/or formats pre-constructed with options).\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n/**\n * @enum {string}\n */\nconst DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nexport class DragAndDropEvent extends Event {\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>} [features] Features.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   */\n  constructor(type, file, features, projection) {\n    super(type);\n\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    this.file = file;\n\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    this.projection = projection;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'addfeatures', DragAndDropEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'addfeatures', Return>} DragAndDropOnSignature\n */\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n *\n * @api\n *\n * @fires DragAndDropEvent\n */\nclass DragAndDrop extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      handleEvent: TRUE,\n    });\n\n    /***\n     * @type {DragAndDropOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DragAndDropOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DragAndDropOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.readAsBuffer_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../format/Feature.js\").default>}\n     */\n    this.formats_ = [];\n    const formatConstructors = options.formatConstructors\n      ? options.formatConstructors\n      : [];\n    for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      let format = formatConstructors[i];\n      if (typeof format === 'function') {\n        format = new format();\n      }\n      this.formats_.push(format);\n      this.readAsBuffer_ =\n        this.readAsBuffer_ || format.getType() === 'arraybuffer';\n    }\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = options.projection\n      ? getProjection(options.projection)\n      : null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.dropListenKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    this.source_ = options.source || null;\n\n    /**\n     * @private\n     * @type {HTMLElement|null}\n     */\n    this.target = options.target ? options.target : null;\n  }\n\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  handleResult_(file, event) {\n    const result = event.target.result;\n    const map = this.getMap();\n    let projection = this.projection_;\n    if (!projection) {\n      projection = getUserProjection();\n      if (!projection) {\n        const view = map.getView();\n        projection = view.getProjection();\n      }\n    }\n\n    let text;\n    const formats = this.formats_;\n    for (let i = 0, ii = formats.length; i < ii; ++i) {\n      const format = formats[i];\n      let input = result;\n      if (this.readAsBuffer_ && format.getType() !== 'arraybuffer') {\n        if (text === undefined) {\n          text = new TextDecoder().decode(result);\n        }\n        input = text;\n      }\n      const features = this.tryReadFeatures_(format, input, {\n        featureProjection: projection,\n      });\n      if (features && features.length > 0) {\n        if (this.source_) {\n          this.source_.clear();\n          this.source_.addFeatures(features);\n        }\n        this.dispatchEvent(\n          new DragAndDropEvent(\n            DragAndDropEventType.ADD_FEATURES,\n            file,\n            features,\n            projection,\n          ),\n        );\n        break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  registerListeners_() {\n    const map = this.getMap();\n    if (map) {\n      const dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [\n        listen(dropArea, EventType.DROP, this.handleDrop, this),\n        listen(dropArea, EventType.DRAGENTER, this.handleStop, this),\n        listen(dropArea, EventType.DRAGOVER, this.handleStop, this),\n        listen(dropArea, EventType.DROP, this.handleStop, this),\n      ];\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   * @override\n   */\n  setActive(active) {\n    if (!this.getActive() && active) {\n      this.registerListeners_();\n    }\n    if (this.getActive() && !active) {\n      this.unregisterListeners_();\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    this.unregisterListeners_();\n    super.setMap(map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  }\n\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  tryReadFeatures_(format, text, options) {\n    try {\n      return (\n        /** @type {Array<import(\"../Feature.js\").default>} */\n        (format.readFeatures(text, options))\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  }\n\n  /**\n   * @param {DragEvent} event Event.\n   */\n  handleDrop(event) {\n    const files = event.dataTransfer.files;\n    for (let i = 0, ii = files.length; i < ii; ++i) {\n      const file = files.item(i);\n      const reader = new FileReader();\n      reader.addEventListener(\n        EventType.LOAD,\n        this.handleResult_.bind(this, file),\n      );\n      if (this.readAsBuffer_) {\n        reader.readAsArrayBuffer(file);\n      } else {\n        reader.readAsText(file);\n      }\n    }\n  }\n\n  /**\n   * @param {DragEvent} event Event.\n   */\n  handleStop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n}\n\nexport default DragAndDrop;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}