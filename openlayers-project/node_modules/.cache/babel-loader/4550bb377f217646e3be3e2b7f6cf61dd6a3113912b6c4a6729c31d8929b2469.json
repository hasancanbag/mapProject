{"ast":null,"code":"/**\n * @module ol/interaction/Extent\n */\nimport Event from '../events/Event.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { always } from '../events/condition.js';\nimport { boundingExtent, getArea } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { toUserExtent } from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.always}.\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to the `Polygon` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to the `Point` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEvent#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\nexport class ExtentEvent extends Event {\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'extentchanged', ExtentEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'extentchanged', Return>} ExtentOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires ExtentEvent\n * @api\n */\nclass Extent extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n    super(/** @type {import(\"./Pointer.js\").Options} */options);\n\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ExtentOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * Condition\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.condition_ = options.condition ? options.condition : always;\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n    if (!options) {\n      options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.boxStyle ? options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.pointerStyle ? options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    if (options.extent) {\n      this.setExtent(options.extent);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../Map.js\").default} map map\n   * @return {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\n    const sortByDistance = function (a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) - squaredDistanceToSegment(pixelCoordinate, b);\n    };\n    const extent = this.getExtentInternal();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n      let vertex = closestOnSegment(pixelCoordinate, closestSegment);\n      const vertexPixel = map.getPixelFromCoordinateInternal(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @return {Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @return {Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    super.handleEvent(mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n    const extent = this.getExtentInternal();\n    let vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    const getOpposingPoint = function (point) {\n      let x_ = null;\n      let y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      const x = vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n      const y = vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n        //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([x, extent[1]]), getOpposingPoint([x, extent[3]]));\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([extent[0], y]), getOpposingPoint([extent[2], y]));\n      }\n      //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @override\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    const extent = this.getExtentInternal();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection (or user projection if set)\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return toUserExtent(this.getExtentInternal(), this.getMap().getView().getProjection());\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtentInternal() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentEvent(this.extent_));\n  }\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Polygon'];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  }\n  if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  }\n  return null;\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [[[extent[0], extent[1]], [extent[0], extent[3]]], [[extent[0], extent[3]], [extent[2], extent[3]]], [[extent[2], extent[3]], [extent[2], extent[1]]], [[extent[2], extent[1]], [extent[0], extent[1]]]];\n}\nexport default Extent;","map":{"version":3,"names":["Event","Feature","MapBrowserEventType","Point","PointerInteraction","VectorLayer","VectorSource","always","boundingExtent","getArea","closestOnSegment","distance","coordinateDistance","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","fromExtent","polygonFromExtent","toUserExtent","ExtentEventType","EXTENTCHANGED","ExtentEvent","constructor","extent","Extent","options","on","once","un","condition_","condition","extent_","pointerHandler_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","style","boxStyle","getDefaultExtentStyleFunction","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixelInternal","sortByDistance","a","b","getExtentInternal","segments","getSegments","sort","closestSegment","vertex","vertexPixel","getPixelFromCoordinateInternal","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","extentFeature","getSource","addFeature","setGeometry","vertexFeature","geometry","getGeometry","setCoordinates","handleEvent","originalEvent","type","POINTERMOVE","handlingDownUpSequence","handleDownEvent","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","handleDragEvent","coordinate","handleUpEvent","setMap","getExtent","getMap","getView","getProjection","dispatchEvent","feature","resolution","fixedPoint","fixedP1","fixedP2"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/interaction/Extent.js"],"sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Event from '../events/Event.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {always} from '../events/condition.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {toUserExtent} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.always}.\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to the `Polygon` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to the `Point` editing style\n * documented in {@link module:ol/style/Style~Style}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEvent#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\nexport class ExtentEvent extends Event {\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'extentchanged', ExtentEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'extentchanged', Return>} ExtentOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires ExtentEvent\n * @api\n */\nclass Extent extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ExtentOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ExtentOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * Condition\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.condition_ = options.condition ? options.condition : always;\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!options) {\n      options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.boxStyle\n        ? options.boxStyle\n        : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.pointerStyle\n        ? options.pointerStyle\n        : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    if (options.extent) {\n      this.setExtent(options.extent);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../Map.js\").default} map map\n   * @return {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\n    const sortByDistance = function (a, b) {\n      return (\n        squaredDistanceToSegment(pixelCoordinate, a) -\n        squaredDistanceToSegment(pixelCoordinate, b)\n      );\n    };\n    const extent = this.getExtentInternal();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n\n      let vertex = closestOnSegment(pixelCoordinate, closestSegment);\n      const vertexPixel = map.getPixelFromCoordinateInternal(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex =\n            squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @return {Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @return {Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    super.handleEvent(mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    const extent = this.getExtentInternal();\n    let vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    const getOpposingPoint = function (point) {\n      let x_ = null;\n      let y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      const x =\n        vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n      const y =\n        vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n        //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([x, extent[1]]),\n          getOpposingPoint([x, extent[3]]),\n        );\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([extent[0], y]),\n          getOpposingPoint([extent[2], y]),\n        );\n      }\n      //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @override\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @override\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    const extent = this.getExtentInternal();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   * @override\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection (or user projection if set)\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return toUserExtent(\n      this.getExtentInternal(),\n      this.getMap().getView().getProjection(),\n    );\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtentInternal() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentEvent(this.extent_));\n  }\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Polygon'];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  }\n  if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  }\n  return null;\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [\n      [extent[0], extent[1]],\n      [extent[0], extent[3]],\n    ],\n    [\n      [extent[0], extent[3]],\n      [extent[2], extent[3]],\n    ],\n    [\n      [extent[2], extent[3]],\n      [extent[2], extent[1]],\n    ],\n    [\n      [extent[2], extent[1]],\n      [extent[0], extent[1]],\n    ],\n  ];\n}\n\nexport default Extent;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,oBAAoB;AACtC,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,kBAAkB,MAAM,cAAc;AAC7C,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SAAQC,MAAM,QAAO,wBAAwB;AAC7C,SAAQC,cAAc,EAAEC,OAAO,QAAO,cAAc;AACpD,SACEC,gBAAgB,EAChBC,QAAQ,IAAIC,kBAAkB,EAC9BC,eAAe,IAAIC,yBAAyB,EAC5CC,wBAAwB,QACnB,kBAAkB;AACzB,SAAQC,kBAAkB,QAAO,mBAAmB;AACpD,SAAQC,UAAU,IAAIC,iBAAiB,QAAO,oBAAoB;AAClE,SAAQC,YAAY,QAAO,YAAY;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,eAAe,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,SAAStB,KAAK,CAAC;EACrC;AACF;AACA;EACEuB,WAAWA,CAACC,MAAM,EAAE;IAClB,KAAK,CAACJ,eAAe,CAACC,aAAa,CAAC;;IAEpC;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACG,MAAM,GAAGA,MAAM;EACtB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,SAASrB,kBAAkB,CAAC;EACtC;AACF;AACA;EACEmB,WAAWA,CAACG,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,KAAK,CAAC,6CAA+CA,OAAQ,CAAC;;IAE9D;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,IAAI;;IAET;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGJ,OAAO,CAACK,SAAS,GAAGL,OAAO,CAACK,SAAS,GAAGxB,MAAM;;IAEhE;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACyB,OAAO,GAAG,IAAI;;IAEnB;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAG,IAAI;;IAE3B;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAClBR,OAAO,CAACS,cAAc,KAAKC,SAAS,GAAGV,OAAO,CAACS,cAAc,GAAG,EAAE;;IAEpE;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACE,gBAAgB,GAAG,KAAK;;IAE7B;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAG,IAAI;;IAE1B;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAG,IAAI;IAE1B,IAAI,CAACb,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;;IAEA;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACc,cAAc,GAAG,IAAInC,WAAW,CAAC;MACpCoC,MAAM,EAAE,IAAInC,YAAY,CAAC;QACvBoC,eAAe,EAAE,KAAK;QACtBC,KAAK,EAAE,CAAC,CAACjB,OAAO,CAACiB;MACnB,CAAC,CAAC;MACFC,KAAK,EAAElB,OAAO,CAACmB,QAAQ,GACnBnB,OAAO,CAACmB,QAAQ,GAChBC,6BAA6B,CAAC,CAAC;MACnCC,oBAAoB,EAAE,IAAI;MAC1BC,sBAAsB,EAAE;IAC1B,CAAC,CAAC;;IAEF;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAG,IAAI5C,WAAW,CAAC;MACpCoC,MAAM,EAAE,IAAInC,YAAY,CAAC;QACvBoC,eAAe,EAAE,KAAK;QACtBC,KAAK,EAAE,CAAC,CAACjB,OAAO,CAACiB;MACnB,CAAC,CAAC;MACFC,KAAK,EAAElB,OAAO,CAACwB,YAAY,GACvBxB,OAAO,CAACwB,YAAY,GACpBC,8BAA8B,CAAC,CAAC;MACpCJ,oBAAoB,EAAE,IAAI;MAC1BC,sBAAsB,EAAE;IAC1B,CAAC,CAAC;IAEF,IAAItB,OAAO,CAACF,MAAM,EAAE;MAClB,IAAI,CAAC4B,SAAS,CAAC1B,OAAO,CAACF,MAAM,CAAC;IAChC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE6B,aAAaA,CAACC,KAAK,EAAEC,GAAG,EAAE;IACxB,MAAMC,eAAe,GAAGD,GAAG,CAACE,8BAA8B,CAACH,KAAK,CAAC;IACjE,MAAMI,cAAc,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;MACrC,OACE7C,wBAAwB,CAACyC,eAAe,EAAEG,CAAC,CAAC,GAC5C5C,wBAAwB,CAACyC,eAAe,EAAEI,CAAC,CAAC;IAEhD,CAAC;IACD,MAAMpC,MAAM,GAAG,IAAI,CAACqC,iBAAiB,CAAC,CAAC;IACvC,IAAIrC,MAAM,EAAE;MACV;MACA,MAAMsC,QAAQ,GAAGC,WAAW,CAACvC,MAAM,CAAC;MACpCsC,QAAQ,CAACE,IAAI,CAACN,cAAc,CAAC;MAC7B,MAAMO,cAAc,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAElC,IAAII,MAAM,GAAGxD,gBAAgB,CAAC8C,eAAe,EAAES,cAAc,CAAC;MAC9D,MAAME,WAAW,GAAGZ,GAAG,CAACa,8BAA8B,CAACF,MAAM,CAAC;;MAE9D;MACA,IAAItD,kBAAkB,CAAC0C,KAAK,EAAEa,WAAW,CAAC,IAAI,IAAI,CAACjC,eAAe,EAAE;QAClE;QACA,MAAMmC,MAAM,GAAGd,GAAG,CAACa,8BAA8B,CAACH,cAAc,CAAC,CAAC,CAAC,CAAC;QACpE,MAAMK,MAAM,GAAGf,GAAG,CAACa,8BAA8B,CAACH,cAAc,CAAC,CAAC,CAAC,CAAC;QACpE,MAAMM,YAAY,GAAGzD,yBAAyB,CAACqD,WAAW,EAAEE,MAAM,CAAC;QACnE,MAAMG,YAAY,GAAG1D,yBAAyB,CAACqD,WAAW,EAAEG,MAAM,CAAC;QACnE,MAAMG,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAACL,YAAY,EAAEC,YAAY,CAAC,CAAC;QAC5D,IAAI,CAACnC,gBAAgB,GAAGoC,IAAI,IAAI,IAAI,CAACvC,eAAe;QACpD,IAAI,IAAI,CAACG,gBAAgB,EAAE;UACzB6B,MAAM,GACJK,YAAY,GAAGC,YAAY,GAAGP,cAAc,CAAC,CAAC,CAAC,GAAGA,cAAc,CAAC,CAAC,CAAC;QACvE;QACA,OAAOC,MAAM;MACf;IACF;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACEW,kBAAkBA,CAACC,eAAe,EAAE;IAClC,MAAMxB,KAAK,GAAGwB,eAAe,CAACxB,KAAK;IACnC,MAAMC,GAAG,GAAGuB,eAAe,CAACvB,GAAG;IAE/B,IAAIW,MAAM,GAAG,IAAI,CAACb,aAAa,CAACC,KAAK,EAAEC,GAAG,CAAC;IAC3C,IAAI,CAACW,MAAM,EAAE;MACXA,MAAM,GAAGX,GAAG,CAACE,8BAA8B,CAACH,KAAK,CAAC;IACpD;IACA,IAAI,CAACyB,6BAA6B,CAACb,MAAM,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;EACEc,4BAA4BA,CAACxD,MAAM,EAAE;IACnC,IAAIyD,aAAa,GAAG,IAAI,CAAC3C,cAAc;IAEvC,IAAI,CAAC2C,aAAa,EAAE;MAClB,IAAI,CAACzD,MAAM,EAAE;QACXyD,aAAa,GAAG,IAAIhF,OAAO,CAAC,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACLgF,aAAa,GAAG,IAAIhF,OAAO,CAACiB,iBAAiB,CAACM,MAAM,CAAC,CAAC;MACxD;MACA,IAAI,CAACc,cAAc,GAAG2C,aAAa;MACnC,IAAI,CAACzC,cAAc,CAAC0C,SAAS,CAAC,CAAC,CAACC,UAAU,CAACF,aAAa,CAAC;IAC3D,CAAC,MAAM;MACL,IAAI,CAACzD,MAAM,EAAE;QACXyD,aAAa,CAACG,WAAW,CAAChD,SAAS,CAAC;MACtC,CAAC,MAAM;QACL6C,aAAa,CAACG,WAAW,CAAClE,iBAAiB,CAACM,MAAM,CAAC,CAAC;MACtD;IACF;IACA,OAAOyD,aAAa;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACEF,6BAA6BA,CAACb,MAAM,EAAE;IACpC,IAAImB,aAAa,GAAG,IAAI,CAAC9C,cAAc;IACvC,IAAI,CAAC8C,aAAa,EAAE;MAClBA,aAAa,GAAG,IAAIpF,OAAO,CAAC,IAAIE,KAAK,CAAC+D,MAAM,CAAC,CAAC;MAC9C,IAAI,CAAC3B,cAAc,GAAG8C,aAAa;MACnC,IAAI,CAACpC,cAAc,CAACiC,SAAS,CAAC,CAAC,CAACC,UAAU,CAACE,aAAa,CAAC;IAC3D,CAAC,MAAM;MACL,MAAMC,QAAQ,GAAGD,aAAa,CAACE,WAAW,CAAC,CAAC;MAC5CD,QAAQ,CAACE,cAAc,CAACtB,MAAM,CAAC;IACjC;IACA,OAAOmB,aAAa;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACEI,WAAWA,CAACX,eAAe,EAAE;IAC3B,IAAI,CAACA,eAAe,CAACY,aAAa,IAAI,CAAC,IAAI,CAAC5D,UAAU,CAACgD,eAAe,CAAC,EAAE;MACvE,OAAO,IAAI;IACb;IACA;IACA,IACEA,eAAe,CAACa,IAAI,IAAIzF,mBAAmB,CAAC0F,WAAW,IACvD,CAAC,IAAI,CAACC,sBAAsB,EAC5B;MACA,IAAI,CAAChB,kBAAkB,CAACC,eAAe,CAAC;IAC1C;IACA;IACA,KAAK,CAACW,WAAW,CAACX,eAAe,CAAC;IAClC;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEgB,eAAeA,CAAChB,eAAe,EAAE;IAC/B,MAAMxB,KAAK,GAAGwB,eAAe,CAACxB,KAAK;IACnC,MAAMC,GAAG,GAAGuB,eAAe,CAACvB,GAAG;IAE/B,MAAM/B,MAAM,GAAG,IAAI,CAACqC,iBAAiB,CAAC,CAAC;IACvC,IAAIK,MAAM,GAAG,IAAI,CAACb,aAAa,CAACC,KAAK,EAAEC,GAAG,CAAC;;IAE3C;IACA,MAAMwC,gBAAgB,GAAG,SAAAA,CAAUC,KAAK,EAAE;MACxC,IAAIC,EAAE,GAAG,IAAI;MACb,IAAIC,EAAE,GAAG,IAAI;MACb,IAAIF,KAAK,CAAC,CAAC,CAAC,IAAIxE,MAAM,CAAC,CAAC,CAAC,EAAE;QACzByE,EAAE,GAAGzE,MAAM,CAAC,CAAC,CAAC;MAChB,CAAC,MAAM,IAAIwE,KAAK,CAAC,CAAC,CAAC,IAAIxE,MAAM,CAAC,CAAC,CAAC,EAAE;QAChCyE,EAAE,GAAGzE,MAAM,CAAC,CAAC,CAAC;MAChB;MACA,IAAIwE,KAAK,CAAC,CAAC,CAAC,IAAIxE,MAAM,CAAC,CAAC,CAAC,EAAE;QACzB0E,EAAE,GAAG1E,MAAM,CAAC,CAAC,CAAC;MAChB,CAAC,MAAM,IAAIwE,KAAK,CAAC,CAAC,CAAC,IAAIxE,MAAM,CAAC,CAAC,CAAC,EAAE;QAChC0E,EAAE,GAAG1E,MAAM,CAAC,CAAC,CAAC;MAChB;MACA,IAAIyE,EAAE,KAAK,IAAI,IAAIC,EAAE,KAAK,IAAI,EAAE;QAC9B,OAAO,CAACD,EAAE,EAAEC,EAAE,CAAC;MACjB;MACA,OAAO,IAAI;IACb,CAAC;IACD,IAAIhC,MAAM,IAAI1C,MAAM,EAAE;MACpB,MAAM2E,CAAC,GACLjC,MAAM,CAAC,CAAC,CAAC,IAAI1C,MAAM,CAAC,CAAC,CAAC,IAAI0C,MAAM,CAAC,CAAC,CAAC,IAAI1C,MAAM,CAAC,CAAC,CAAC,GAAG0C,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;MACrE,MAAMkC,CAAC,GACLlC,MAAM,CAAC,CAAC,CAAC,IAAI1C,MAAM,CAAC,CAAC,CAAC,IAAI0C,MAAM,CAAC,CAAC,CAAC,IAAI1C,MAAM,CAAC,CAAC,CAAC,GAAG0C,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;;MAErE;MACA,IAAIiC,CAAC,KAAK,IAAI,IAAIC,CAAC,KAAK,IAAI,EAAE;QAC5B,IAAI,CAACnE,eAAe,GAAGoE,eAAe,CAACN,gBAAgB,CAAC7B,MAAM,CAAC,CAAC;QAChE;MACF,CAAC,MAAM,IAAIiC,CAAC,KAAK,IAAI,EAAE;QACrB,IAAI,CAAClE,eAAe,GAAGqE,cAAc,CACnCP,gBAAgB,CAAC,CAACI,CAAC,EAAE3E,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAChCuE,gBAAgB,CAAC,CAACI,CAAC,EAAE3E,MAAM,CAAC,CAAC,CAAC,CAAC,CACjC,CAAC;MACH,CAAC,MAAM,IAAI4E,CAAC,KAAK,IAAI,EAAE;QACrB,IAAI,CAACnE,eAAe,GAAGqE,cAAc,CACnCP,gBAAgB,CAAC,CAACvE,MAAM,CAAC,CAAC,CAAC,EAAE4E,CAAC,CAAC,CAAC,EAChCL,gBAAgB,CAAC,CAACvE,MAAM,CAAC,CAAC,CAAC,EAAE4E,CAAC,CAAC,CACjC,CAAC;MACH;MACA;IACF,CAAC,MAAM;MACLlC,MAAM,GAAGX,GAAG,CAACE,8BAA8B,CAACH,KAAK,CAAC;MAClD,IAAI,CAACF,SAAS,CAAC,CAACc,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D,IAAI,CAACjC,eAAe,GAAGoE,eAAe,CAACnC,MAAM,CAAC;IAChD;IACA,OAAO,IAAI,CAAC,CAAC;EACf;;EAEA;AACF;AACA;AACA;AACA;EACEqC,eAAeA,CAACzB,eAAe,EAAE;IAC/B,IAAI,IAAI,CAAC7C,eAAe,EAAE;MACxB,MAAMuB,eAAe,GAAGsB,eAAe,CAAC0B,UAAU;MAClD,IAAI,CAACpD,SAAS,CAAC,IAAI,CAACnB,eAAe,CAACuB,eAAe,CAAC,CAAC;MACrD,IAAI,CAACuB,6BAA6B,CAACvB,eAAe,CAAC;IACrD;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEiD,aAAaA,CAAC3B,eAAe,EAAE;IAC7B,IAAI,CAAC7C,eAAe,GAAG,IAAI;IAC3B;IACA,MAAMT,MAAM,GAAG,IAAI,CAACqC,iBAAiB,CAAC,CAAC;IACvC,IAAI,CAACrC,MAAM,IAAIf,OAAO,CAACe,MAAM,CAAC,KAAK,CAAC,EAAE;MACpC,IAAI,CAAC4B,SAAS,CAAC,IAAI,CAAC;IACtB;IACA,OAAO,KAAK,CAAC,CAAC;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEsD,MAAMA,CAACnD,GAAG,EAAE;IACV,IAAI,CAACf,cAAc,CAACkE,MAAM,CAACnD,GAAG,CAAC;IAC/B,IAAI,CAACN,cAAc,CAACyD,MAAM,CAACnD,GAAG,CAAC;IAC/B,KAAK,CAACmD,MAAM,CAACnD,GAAG,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEoD,SAASA,CAAA,EAAG;IACV,OAAOxF,YAAY,CACjB,IAAI,CAAC0C,iBAAiB,CAAC,CAAC,EACxB,IAAI,CAAC+C,MAAM,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,aAAa,CAAC,CACxC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEjD,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAC7B,OAAO;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEoB,SAASA,CAAC5B,MAAM,EAAE;IAChB;IACA,IAAI,CAACQ,OAAO,GAAGR,MAAM,GAAGA,MAAM,GAAG,IAAI;IACrC,IAAI,CAACwD,4BAA4B,CAACxD,MAAM,CAAC;IACzC,IAAI,CAACuF,aAAa,CAAC,IAAIzF,WAAW,CAAC,IAAI,CAACU,OAAO,CAAC,CAAC;EACnD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASc,6BAA6BA,CAAA,EAAG;EACvC,MAAMF,KAAK,GAAG5B,kBAAkB,CAAC,CAAC;EAClC,OAAO,UAAUgG,OAAO,EAAEC,UAAU,EAAE;IACpC,OAAOrE,KAAK,CAAC,SAAS,CAAC;EACzB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASO,8BAA8BA,CAAA,EAAG;EACxC,MAAMP,KAAK,GAAG5B,kBAAkB,CAAC,CAAC;EAClC,OAAO,UAAUgG,OAAO,EAAEC,UAAU,EAAE;IACpC,OAAOrE,KAAK,CAAC,OAAO,CAAC;EACvB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,SAASyD,eAAeA,CAACa,UAAU,EAAE;EACnC,OAAO,UAAUlB,KAAK,EAAE;IACtB,OAAOxF,cAAc,CAAC,CAAC0G,UAAU,EAAElB,KAAK,CAAC,CAAC;EAC5C,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASM,cAAcA,CAACa,OAAO,EAAEC,OAAO,EAAE;EACxC,IAAID,OAAO,CAAC,CAAC,CAAC,IAAIC,OAAO,CAAC,CAAC,CAAC,EAAE;IAC5B,OAAO,UAAUpB,KAAK,EAAE;MACtB,OAAOxF,cAAc,CAAC,CAAC2G,OAAO,EAAE,CAACnB,KAAK,CAAC,CAAC,CAAC,EAAEoB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;EACH;EACA,IAAID,OAAO,CAAC,CAAC,CAAC,IAAIC,OAAO,CAAC,CAAC,CAAC,EAAE;IAC5B,OAAO,UAAUpB,KAAK,EAAE;MACtB,OAAOxF,cAAc,CAAC,CAAC2G,OAAO,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,EAAEpB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;EACH;EACA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA,SAASjC,WAAWA,CAACvC,MAAM,EAAE;EAC3B,OAAO,CACL,CACE,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,EACtB,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CACvB,EACD,CACE,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,EACtB,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CACvB,EACD,CACE,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,EACtB,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CACvB,EACD,CACE,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,EACtB,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CACvB,CACF;AACH;AAEA,eAAeC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}