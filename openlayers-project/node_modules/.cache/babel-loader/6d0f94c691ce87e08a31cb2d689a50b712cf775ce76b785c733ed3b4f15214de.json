{"ast":null,"code":"/**\n * @module ol/source/DataTile\n */\nimport DataTile from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport ReprojDataTile from '../reproj/DataTile.js';\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createXYZ, extentFromProjection, getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getUid } from '../util.js';\nimport { toPromise } from '../functions.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {'anonymous'|'use-credentials'} CrossOriginAttribute\n */\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {AbortSignal} signal An abort controller signal.\n * @property {CrossOriginAttribute} [crossOrigin] The cross-origin attribute for images.\n * @property {number} [maxY] The maximum y coordinate at the given z level.  Will be undefined if the\n * underlying tile grid does not have a known extent.\n */\n\n/**\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @typedef {function(number, number, number, LoaderOptions) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\n */\n\n/**\n * @typedef {Object} Options\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in milliseconds).\n * @property {number} [bandCount=4] Number of bands represented in the data.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {CrossOriginAttribute} [crossOrigin='anonymous'] The crossOrigin property to pass to loaders for image data.\n * @property {string} [key] Key for use in caching tiles.\n */\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @template {import(\"../Tile.js\").default} [TileType=DataTile]\n * @extends TileSource<TileType>\n * @api\n */\nclass DataTileSource extends TileSource {\n  /**\n   * @param {Options} options DataTile source options.\n   */\n  constructor(options) {\n    const projection = options.projection === undefined ? 'EPSG:3857' : options.projection;\n    let tileGrid = options.tileGrid;\n    if (tileGrid === undefined && projection) {\n      tileGrid = createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize\n      });\n    }\n    super({\n      cacheSize: 0.1,\n      // don't cache on the source\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: projection,\n      tileGrid: tileGrid,\n      state: options.state,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {import('../size.js').Size|null}\n     */\n    this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;\n\n    /**\n     * @private\n     * @type {Array<import('../size.js').Size>|null}\n     */\n    this.tileSizes_ = null;\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n    /**\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    /**\n     * @private\n     */\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection_ = {};\n\n    /**\n     * @private\n     * @type {CrossOriginAttribute}\n     */\n    this.crossOrigin_ = options.crossOrigin || 'anonymous';\n  }\n\n  /**\n   * Set the source tile sizes.  The length of the array is expected to match the number of\n   * levels in the tile grid.\n   * @protected\n   * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.\n   */\n  setTileSizes(tileSizes) {\n    this.tileSizes_ = tileSizes;\n  }\n\n  /**\n   * Get the source tile size at the given zoom level.  This may be different than the rendered tile\n   * size.\n   * @protected\n   * @param {number} z Tile zoom level.\n   * @return {import('../size.js').Size} The source tile size.\n   */\n  getTileSize(z) {\n    if (this.tileSizes_) {\n      return this.tileSizes_[z];\n    }\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    const tileGrid = this.getTileGrid();\n    return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.gutter_;\n    }\n    return 0;\n  }\n\n  /**\n   * @param {Loader} loader The data loader.\n   * @protected\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} targetProj The output projection.\n   * @param {import(\"../proj/Projection.js\").default} sourceProj The input projection.\n   * @return {!TileType} Tile.\n   */\n  getReprojTile_(z, x, y, targetProj, sourceProj) {\n    const tileGrid = this.getTileGrid();\n    const reprojTilePixelRatio = Math.max.apply(null, tileGrid.getResolutions().map((r, z) => {\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const textureSize = this.getTileSize(z);\n      return Math.max(textureSize[0] / tileSize[0], textureSize[1] / tileSize[1]);\n    }));\n    const sourceTileGrid = this.getTileGridForProjection(sourceProj);\n    const targetTileGrid = this.getTileGridForProjection(targetProj);\n    const tileCoord = [z, x, y];\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, targetProj);\n    const options = Object.assign({\n      sourceProj,\n      sourceTileGrid,\n      targetProj,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      pixelRatio: reprojTilePixelRatio,\n      gutter: this.getGutterForProjection(sourceProj),\n      getTileFunction: (z, x, y, pixelRatio) => this.getTile(z, x, y, pixelRatio, sourceProj)\n    }, /** @type {import(\"../reproj/DataTile.js\").Options} */this.tileOptions);\n    const tile = /** @type {TileType} */\n    /** @type {*} */new ReprojDataTile(options);\n    tile.key = this.getKey();\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {TileType|null} Tile (or null if outside source extent).\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (sourceProjection && projection && !equivalent(sourceProjection, projection)) {\n      return this.getReprojTile_(z, x, y, projection, sourceProjection);\n    }\n    const size = this.getTileSize(z);\n    const sourceLoader = this.loader_;\n    const controller = new AbortController();\n\n    /**\n     * @type {LoaderOptions}\n     */\n    const loaderOptions = {\n      signal: controller.signal,\n      crossOrigin: this.crossOrigin_\n    };\n    const tileCoord = this.getTileCoordForTileUrlFunction([z, x, y]);\n    if (!tileCoord) {\n      return null;\n    }\n    const requestZ = tileCoord[0];\n    const requestX = tileCoord[1];\n    const requestY = tileCoord[2];\n    function loader() {\n      return toPromise(function () {\n        return sourceLoader(requestZ, requestX, requestY, loaderOptions);\n      });\n    }\n\n    /**\n     * @type {import(\"../DataTile.js\").Options}\n     */\n    const options = Object.assign({\n      tileCoord: [z, x, y],\n      loader: loader,\n      size: size,\n      controller: controller\n    }, this.tileOptions);\n    const tile = /** @type {TileType} */\n    /** @type {*} */new DataTile(options);\n    tile.key = this.getKey();\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n    return tile;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   */\n  handleTileChange_(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection_)) {\n      this.tileGridForProjection_[projKey] = getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection_[projKey];\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection_)) {\n        this.tileGridForProjection_[projKey] = tilegrid;\n      }\n    }\n  }\n}\nexport default DataTileSource;","map":{"version":3,"names":["DataTile","EventType","ReprojDataTile","TileEventType","TileSource","TileSourceEvent","TileState","createXYZ","extentFromProjection","getForProjection","getTileGridForProjection","equivalent","get","getProjection","getUid","toPromise","toSize","DataTileSource","constructor","options","projection","undefined","tileGrid","extent","maxResolution","maxZoom","minZoom","tileSize","cacheSize","attributions","attributionsCollapsible","state","wrapX","transition","interpolate","key","gutter_","gutter","tileSize_","tileSizes_","tileLoadingKeys_","loader_","loader","handleTileChange_","bind","bandCount","tileGridForProjection_","crossOrigin_","crossOrigin","setTileSizes","tileSizes","getTileSize","z","getTileGrid","getGutterForProjection","thisProj","setLoader","getReprojTile_","x","y","targetProj","sourceProj","reprojTilePixelRatio","Math","max","apply","getResolutions","map","r","textureSize","sourceTileGrid","targetTileGrid","tileCoord","wrappedTileCoord","getTileCoordForTileUrlFunction","Object","assign","pixelRatio","getTileFunction","getTile","tileOptions","tile","getKey","sourceProjection","size","sourceLoader","controller","AbortController","loaderOptions","signal","requestZ","requestX","requestY","addEventListener","CHANGE","event","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","dispatchEvent","projKey","setTileGridForProjection","tilegrid","proj"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/source/DataTile.js"],"sourcesContent":["/**\n * @module ol/source/DataTile\n */\nimport DataTile from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport ReprojDataTile from '../reproj/DataTile.js';\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {\n  createXYZ,\n  extentFromProjection,\n  getForProjection as getTileGridForProjection,\n} from '../tilegrid.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getUid} from '../util.js';\nimport {toPromise} from '../functions.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {'anonymous'|'use-credentials'} CrossOriginAttribute\n */\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {AbortSignal} signal An abort controller signal.\n * @property {CrossOriginAttribute} [crossOrigin] The cross-origin attribute for images.\n * @property {number} [maxY] The maximum y coordinate at the given z level.  Will be undefined if the\n * underlying tile grid does not have a known extent.\n */\n\n/**\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @typedef {function(number, number, number, LoaderOptions) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\n */\n\n/**\n * @typedef {Object} Options\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in milliseconds).\n * @property {number} [bandCount=4] Number of bands represented in the data.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {CrossOriginAttribute} [crossOrigin='anonymous'] The crossOrigin property to pass to loaders for image data.\n * @property {string} [key] Key for use in caching tiles.\n */\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @template {import(\"../Tile.js\").default} [TileType=DataTile]\n * @extends TileSource<TileType>\n * @api\n */\nclass DataTileSource extends TileSource {\n  /**\n   * @param {Options} options DataTile source options.\n   */\n  constructor(options) {\n    const projection =\n      options.projection === undefined ? 'EPSG:3857' : options.projection;\n\n    let tileGrid = options.tileGrid;\n    if (tileGrid === undefined && projection) {\n      tileGrid = createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize,\n      });\n    }\n\n    super({\n      cacheSize: 0.1, // don't cache on the source\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: projection,\n      tileGrid: tileGrid,\n      state: options.state,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {import('../size.js').Size|null}\n     */\n    this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;\n\n    /**\n     * @private\n     * @type {Array<import('../size.js').Size>|null}\n     */\n    this.tileSizes_ = null;\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n    /**\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    /**\n     * @private\n     */\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection_ = {};\n\n    /**\n     * @private\n     * @type {CrossOriginAttribute}\n     */\n    this.crossOrigin_ = options.crossOrigin || 'anonymous';\n  }\n\n  /**\n   * Set the source tile sizes.  The length of the array is expected to match the number of\n   * levels in the tile grid.\n   * @protected\n   * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.\n   */\n  setTileSizes(tileSizes) {\n    this.tileSizes_ = tileSizes;\n  }\n\n  /**\n   * Get the source tile size at the given zoom level.  This may be different than the rendered tile\n   * size.\n   * @protected\n   * @param {number} z Tile zoom level.\n   * @return {import('../size.js').Size} The source tile size.\n   */\n  getTileSize(z) {\n    if (this.tileSizes_) {\n      return this.tileSizes_[z];\n    }\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    const tileGrid = this.getTileGrid();\n    return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.gutter_;\n    }\n\n    return 0;\n  }\n\n  /**\n   * @param {Loader} loader The data loader.\n   * @protected\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} targetProj The output projection.\n   * @param {import(\"../proj/Projection.js\").default} sourceProj The input projection.\n   * @return {!TileType} Tile.\n   */\n  getReprojTile_(z, x, y, targetProj, sourceProj) {\n    const tileGrid = this.getTileGrid();\n    const reprojTilePixelRatio = Math.max.apply(\n      null,\n      tileGrid.getResolutions().map((r, z) => {\n        const tileSize = toSize(tileGrid.getTileSize(z));\n        const textureSize = this.getTileSize(z);\n        return Math.max(\n          textureSize[0] / tileSize[0],\n          textureSize[1] / tileSize[1],\n        );\n      }),\n    );\n\n    const sourceTileGrid = this.getTileGridForProjection(sourceProj);\n    const targetTileGrid = this.getTileGridForProjection(targetProj);\n    const tileCoord = [z, x, y];\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      targetProj,\n    );\n\n    const options = Object.assign(\n      {\n        sourceProj,\n        sourceTileGrid,\n        targetProj,\n        targetTileGrid,\n        tileCoord,\n        wrappedTileCoord,\n        pixelRatio: reprojTilePixelRatio,\n        gutter: this.getGutterForProjection(sourceProj),\n        getTileFunction: (z, x, y, pixelRatio) =>\n          this.getTile(z, x, y, pixelRatio, sourceProj),\n      },\n      /** @type {import(\"../reproj/DataTile.js\").Options} */ (this.tileOptions),\n    );\n    const tile = /** @type {TileType} */ (\n      /** @type {*} */ (new ReprojDataTile(options))\n    );\n    tile.key = this.getKey();\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {TileType|null} Tile (or null if outside source extent).\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      sourceProjection &&\n      projection &&\n      !equivalent(sourceProjection, projection)\n    ) {\n      return this.getReprojTile_(z, x, y, projection, sourceProjection);\n    }\n\n    const size = this.getTileSize(z);\n\n    const sourceLoader = this.loader_;\n\n    const controller = new AbortController();\n\n    /**\n     * @type {LoaderOptions}\n     */\n    const loaderOptions = {\n      signal: controller.signal,\n      crossOrigin: this.crossOrigin_,\n    };\n\n    const tileCoord = this.getTileCoordForTileUrlFunction([z, x, y]);\n    if (!tileCoord) {\n      return null;\n    }\n\n    const requestZ = tileCoord[0];\n    const requestX = tileCoord[1];\n    const requestY = tileCoord[2];\n    function loader() {\n      return toPromise(function () {\n        return sourceLoader(requestZ, requestX, requestY, loaderOptions);\n      });\n    }\n\n    /**\n     * @type {import(\"../DataTile.js\").Options}\n     */\n    const options = Object.assign(\n      {\n        tileCoord: [z, x, y],\n        loader: loader,\n        size: size,\n        controller: controller,\n      },\n      this.tileOptions,\n    );\n\n    const tile = /** @type {TileType} */ (\n      /** @type {*} */ (new DataTile(options))\n    );\n    tile.key = this.getKey();\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n\n    return tile;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   */\n  handleTileChange_(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection_)) {\n      this.tileGridForProjection_[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection_[projKey];\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection_)) {\n        this.tileGridForProjection_[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\nexport default DataTileSource;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}