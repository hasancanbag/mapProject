{"ast":null,"code":"const SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nconst SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// Threshold chosen based on both benchmarking and knowledge about browser string\n// data structures (which currently switch structure types at 12 bytes or more)\nconst TEXT_DECODER_MIN_LENGTH = 12;\nconst utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8');\nconst PBF_VARINT = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum\nconst PBF_FIXED64 = 1; // 64-bit: double, fixed64, sfixed64\nconst PBF_BYTES = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields\nconst PBF_FIXED32 = 5; // 32-bit: float, fixed32, sfixed32\n\nexport default class Pbf {\n  /**\n   * @param {Uint8Array | ArrayBuffer} [buf]\n   */\n  constructor(buf = new Uint8Array(16)) {\n    this.buf = ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf);\n    this.dataView = new DataView(this.buf.buffer);\n    this.pos = 0;\n    this.type = 0;\n    this.length = this.buf.length;\n  }\n\n  // === READING =================================================================\n\n  /**\n   * @template T\n   * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n   * @param {T} result\n   * @param {number} [end]\n   */\n  readFields(readField, result, end = this.length) {\n    while (this.pos < end) {\n      const val = this.readVarint(),\n        tag = val >> 3,\n        startPos = this.pos;\n      this.type = val & 0x7;\n      readField(tag, result, this);\n      if (this.pos === startPos) this.skip(val);\n    }\n    return result;\n  }\n\n  /**\n   * @template T\n   * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n   * @param {T} result\n   */\n  readMessage(readField, result) {\n    return this.readFields(readField, result, this.readVarint() + this.pos);\n  }\n  readFixed32() {\n    const val = this.dataView.getUint32(this.pos, true);\n    this.pos += 4;\n    return val;\n  }\n  readSFixed32() {\n    const val = this.dataView.getInt32(this.pos, true);\n    this.pos += 4;\n    return val;\n  }\n\n  // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)\n\n  readFixed64() {\n    const val = this.dataView.getUint32(this.pos, true) + this.dataView.getUint32(this.pos + 4, true) * SHIFT_LEFT_32;\n    this.pos += 8;\n    return val;\n  }\n  readSFixed64() {\n    const val = this.dataView.getUint32(this.pos, true) + this.dataView.getInt32(this.pos + 4, true) * SHIFT_LEFT_32;\n    this.pos += 8;\n    return val;\n  }\n  readFloat() {\n    const val = this.dataView.getFloat32(this.pos, true);\n    this.pos += 4;\n    return val;\n  }\n  readDouble() {\n    const val = this.dataView.getFloat64(this.pos, true);\n    this.pos += 8;\n    return val;\n  }\n\n  /**\n   * @param {boolean} [isSigned]\n   */\n  readVarint(isSigned) {\n    const buf = this.buf;\n    let val, b;\n    b = buf[this.pos++];\n    val = b & 0x7f;\n    if (b < 0x80) return val;\n    b = buf[this.pos++];\n    val |= (b & 0x7f) << 7;\n    if (b < 0x80) return val;\n    b = buf[this.pos++];\n    val |= (b & 0x7f) << 14;\n    if (b < 0x80) return val;\n    b = buf[this.pos++];\n    val |= (b & 0x7f) << 21;\n    if (b < 0x80) return val;\n    b = buf[this.pos];\n    val |= (b & 0x0f) << 28;\n    return readVarintRemainder(val, isSigned, this);\n  }\n  readVarint64() {\n    // for compatibility with v2.0.1\n    return this.readVarint(true);\n  }\n  readSVarint() {\n    const num = this.readVarint();\n    return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\n  }\n  readBoolean() {\n    return Boolean(this.readVarint());\n  }\n  readString() {\n    const end = this.readVarint() + this.pos;\n    const pos = this.pos;\n    this.pos = end;\n    if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {\n      // longer strings are fast with the built-in browser TextDecoder API\n      return utf8TextDecoder.decode(this.buf.subarray(pos, end));\n    }\n    // short strings are fast with our custom implementation\n    return readUtf8(this.buf, pos, end);\n  }\n  readBytes() {\n    const end = this.readVarint() + this.pos,\n      buffer = this.buf.subarray(this.pos, end);\n    this.pos = end;\n    return buffer;\n  }\n\n  // verbose for performance reasons; doesn't affect gzipped size\n\n  /**\n   * @param {number[]} [arr]\n   * @param {boolean} [isSigned]\n   */\n  readPackedVarint(arr = [], isSigned) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readVarint(isSigned));\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedSVarint(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readSVarint());\n    return arr;\n  }\n  /** @param {boolean[]} [arr] */\n  readPackedBoolean(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readBoolean());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedFloat(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readFloat());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedDouble(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readDouble());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedFixed32(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readFixed32());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedSFixed32(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readSFixed32());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedFixed64(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readFixed64());\n    return arr;\n  }\n  /** @param {number[]} [arr] */\n  readPackedSFixed64(arr = []) {\n    const end = this.readPackedEnd();\n    while (this.pos < end) arr.push(this.readSFixed64());\n    return arr;\n  }\n  readPackedEnd() {\n    return this.type === PBF_BYTES ? this.readVarint() + this.pos : this.pos + 1;\n  }\n\n  /** @param {number} val */\n  skip(val) {\n    const type = val & 0x7;\n    if (type === PBF_VARINT) while (this.buf[this.pos++] > 0x7f) {} else if (type === PBF_BYTES) this.pos = this.readVarint() + this.pos;else if (type === PBF_FIXED32) this.pos += 4;else if (type === PBF_FIXED64) this.pos += 8;else throw new Error(`Unimplemented type: ${type}`);\n  }\n\n  // === WRITING =================================================================\n\n  /**\n   * @param {number} tag\n   * @param {number} type\n   */\n  writeTag(tag, type) {\n    this.writeVarint(tag << 3 | type);\n  }\n\n  /** @param {number} min */\n  realloc(min) {\n    let length = this.length || 16;\n    while (length < this.pos + min) length *= 2;\n    if (length !== this.length) {\n      const buf = new Uint8Array(length);\n      buf.set(this.buf);\n      this.buf = buf;\n      this.dataView = new DataView(buf.buffer);\n      this.length = length;\n    }\n  }\n  finish() {\n    this.length = this.pos;\n    this.pos = 0;\n    return this.buf.subarray(0, this.length);\n  }\n\n  /** @param {number} val */\n  writeFixed32(val) {\n    this.realloc(4);\n    this.dataView.setInt32(this.pos, val, true);\n    this.pos += 4;\n  }\n\n  /** @param {number} val */\n  writeSFixed32(val) {\n    this.realloc(4);\n    this.dataView.setInt32(this.pos, val, true);\n    this.pos += 4;\n  }\n\n  /** @param {number} val */\n  writeFixed64(val) {\n    this.realloc(8);\n    this.dataView.setInt32(this.pos, val & -1, true);\n    this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n    this.pos += 8;\n  }\n\n  /** @param {number} val */\n  writeSFixed64(val) {\n    this.realloc(8);\n    this.dataView.setInt32(this.pos, val & -1, true);\n    this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n    this.pos += 8;\n  }\n\n  /** @param {number} val */\n  writeVarint(val) {\n    val = +val || 0;\n    if (val > 0xfffffff || val < 0) {\n      writeBigVarint(val, this);\n      return;\n    }\n    this.realloc(4);\n    this.buf[this.pos++] = val & 0x7f | (val > 0x7f ? 0x80 : 0);\n    if (val <= 0x7f) return;\n    this.buf[this.pos++] = (val >>>= 7) & 0x7f | (val > 0x7f ? 0x80 : 0);\n    if (val <= 0x7f) return;\n    this.buf[this.pos++] = (val >>>= 7) & 0x7f | (val > 0x7f ? 0x80 : 0);\n    if (val <= 0x7f) return;\n    this.buf[this.pos++] = val >>> 7 & 0x7f;\n  }\n\n  /** @param {number} val */\n  writeSVarint(val) {\n    this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);\n  }\n\n  /** @param {boolean} val */\n  writeBoolean(val) {\n    this.writeVarint(+val);\n  }\n\n  /** @param {string} str */\n  writeString(str) {\n    str = String(str);\n    this.realloc(str.length * 4);\n    this.pos++; // reserve 1 byte for short string length\n\n    const startPos = this.pos;\n    // write the string directly to the buffer and see how much was written\n    this.pos = writeUtf8(this.buf, str, this.pos);\n    const len = this.pos - startPos;\n    if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n    // finally, write the message length in the reserved place and restore the position\n    this.pos = startPos - 1;\n    this.writeVarint(len);\n    this.pos += len;\n  }\n\n  /** @param {number} val */\n  writeFloat(val) {\n    this.realloc(4);\n    this.dataView.setFloat32(this.pos, val, true);\n    this.pos += 4;\n  }\n\n  /** @param {number} val */\n  writeDouble(val) {\n    this.realloc(8);\n    this.dataView.setFloat64(this.pos, val, true);\n    this.pos += 8;\n  }\n\n  /** @param {Uint8Array} buffer */\n  writeBytes(buffer) {\n    const len = buffer.length;\n    this.writeVarint(len);\n    this.realloc(len);\n    for (let i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];\n  }\n\n  /**\n   * @template T\n   * @param {(obj: T, pbf: Pbf) => void} fn\n   * @param {T} obj\n   */\n  writeRawMessage(fn, obj) {\n    this.pos++; // reserve 1 byte for short message length\n\n    // write the message directly to the buffer and see how much was written\n    const startPos = this.pos;\n    fn(obj, this);\n    const len = this.pos - startPos;\n    if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n    // finally, write the message length in the reserved place and restore the position\n    this.pos = startPos - 1;\n    this.writeVarint(len);\n    this.pos += len;\n  }\n\n  /**\n   * @template T\n   * @param {number} tag\n   * @param {(obj: T, pbf: Pbf) => void} fn\n   * @param {T} obj\n   */\n  writeMessage(tag, fn, obj) {\n    this.writeTag(tag, PBF_BYTES);\n    this.writeRawMessage(fn, obj);\n  }\n\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedVarint(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedVarint, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedSVarint(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {boolean[]} arr\n   */\n  writePackedBoolean(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedFloat(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedFloat, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedDouble(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedDouble, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedFixed32(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedSFixed32(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedFixed64(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);\n  }\n  /**\n   * @param {number} tag\n   * @param {number[]} arr\n   */\n  writePackedSFixed64(tag, arr) {\n    if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr);\n  }\n\n  /**\n   * @param {number} tag\n   * @param {Uint8Array} buffer\n   */\n  writeBytesField(tag, buffer) {\n    this.writeTag(tag, PBF_BYTES);\n    this.writeBytes(buffer);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeFixed32Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED32);\n    this.writeFixed32(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeSFixed32Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED32);\n    this.writeSFixed32(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeFixed64Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED64);\n    this.writeFixed64(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeSFixed64Field(tag, val) {\n    this.writeTag(tag, PBF_FIXED64);\n    this.writeSFixed64(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeVarintField(tag, val) {\n    this.writeTag(tag, PBF_VARINT);\n    this.writeVarint(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeSVarintField(tag, val) {\n    this.writeTag(tag, PBF_VARINT);\n    this.writeSVarint(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {string} str\n   */\n  writeStringField(tag, str) {\n    this.writeTag(tag, PBF_BYTES);\n    this.writeString(str);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeFloatField(tag, val) {\n    this.writeTag(tag, PBF_FIXED32);\n    this.writeFloat(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {number} val\n   */\n  writeDoubleField(tag, val) {\n    this.writeTag(tag, PBF_FIXED64);\n    this.writeDouble(val);\n  }\n  /**\n   * @param {number} tag\n   * @param {boolean} val\n   */\n  writeBooleanField(tag, val) {\n    this.writeVarintField(tag, +val);\n  }\n}\n;\n\n/**\n * @param {number} l\n * @param {boolean | undefined} s\n * @param {Pbf} p\n */\nfunction readVarintRemainder(l, s, p) {\n  const buf = p.buf;\n  let h, b;\n  b = buf[p.pos++];\n  h = (b & 0x70) >> 4;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 3;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 10;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 17;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x7f) << 24;\n  if (b < 0x80) return toNum(l, h, s);\n  b = buf[p.pos++];\n  h |= (b & 0x01) << 31;\n  if (b < 0x80) return toNum(l, h, s);\n  throw new Error('Expected varint not more than 10 bytes');\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {boolean} [isSigned]\n */\nfunction toNum(low, high, isSigned) {\n  return isSigned ? high * 0x100000000 + (low >>> 0) : (high >>> 0) * 0x100000000 + (low >>> 0);\n}\n\n/**\n * @param {number} val\n * @param {Pbf} pbf\n */\nfunction writeBigVarint(val, pbf) {\n  let low, high;\n  if (val >= 0) {\n    low = val % 0x100000000 | 0;\n    high = val / 0x100000000 | 0;\n  } else {\n    low = ~(-val % 0x100000000);\n    high = ~(-val / 0x100000000);\n    if (low ^ 0xffffffff) {\n      low = low + 1 | 0;\n    } else {\n      low = 0;\n      high = high + 1 | 0;\n    }\n  }\n  if (val >= 0x10000000000000000 || val < -0x10000000000000000) {\n    throw new Error('Given varint doesn\\'t fit into 10 bytes');\n  }\n  pbf.realloc(10);\n  writeBigVarintLow(low, high, pbf);\n  writeBigVarintHigh(high, pbf);\n}\n\n/**\n * @param {number} high\n * @param {number} low\n * @param {Pbf} pbf\n */\nfunction writeBigVarintLow(low, high, pbf) {\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos++] = low & 0x7f | 0x80;\n  low >>>= 7;\n  pbf.buf[pbf.pos] = low & 0x7f;\n}\n\n/**\n * @param {number} high\n * @param {Pbf} pbf\n */\nfunction writeBigVarintHigh(high, pbf) {\n  const lsb = (high & 0x07) << 4;\n  pbf.buf[pbf.pos++] |= lsb | ((high >>>= 3) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);\n  if (!high) return;\n  pbf.buf[pbf.pos++] = high & 0x7f;\n}\n\n/**\n * @param {number} startPos\n * @param {number} len\n * @param {Pbf} pbf\n */\nfunction makeRoomForExtraLength(startPos, len, pbf) {\n  const extraLen = len <= 0x3fff ? 1 : len <= 0x1fffff ? 2 : len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));\n\n  // if 1 byte isn't enough for encoding message length, shift the data to the right\n  pbf.realloc(extraLen);\n  for (let i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];\n}\n\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedVarint(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSVarint(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFloat(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedDouble(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);\n}\n/**\n * @param {boolean[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedBoolean(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed32(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed32(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed64(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed64(arr, pbf) {\n  for (let i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]);\n}\n\n// Buffer code below from https://github.com/feross/buffer, MIT-licensed\n\n/**\n * @param {Uint8Array} buf\n * @param {number} pos\n * @param {number} end\n */\nfunction readUtf8(buf, pos, end) {\n  let str = '';\n  let i = pos;\n  while (i < end) {\n    const b0 = buf[i];\n    let c = null; // codepoint\n    let bytesPerSequence = b0 > 0xEF ? 4 : b0 > 0xDF ? 3 : b0 > 0xBF ? 2 : 1;\n    if (i + bytesPerSequence > end) break;\n    let b1, b2, b3;\n    if (bytesPerSequence === 1) {\n      if (b0 < 0x80) {\n        c = b0;\n      }\n    } else if (bytesPerSequence === 2) {\n      b1 = buf[i + 1];\n      if ((b1 & 0xC0) === 0x80) {\n        c = (b0 & 0x1F) << 0x6 | b1 & 0x3F;\n        if (c <= 0x7F) {\n          c = null;\n        }\n      }\n    } else if (bytesPerSequence === 3) {\n      b1 = buf[i + 1];\n      b2 = buf[i + 2];\n      if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {\n        c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | b2 & 0x3F;\n        if (c <= 0x7FF || c >= 0xD800 && c <= 0xDFFF) {\n          c = null;\n        }\n      }\n    } else if (bytesPerSequence === 4) {\n      b1 = buf[i + 1];\n      b2 = buf[i + 2];\n      b3 = buf[i + 3];\n      if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n        c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | b3 & 0x3F;\n        if (c <= 0xFFFF || c >= 0x110000) {\n          c = null;\n        }\n      }\n    }\n    if (c === null) {\n      c = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (c > 0xFFFF) {\n      c -= 0x10000;\n      str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);\n      c = 0xDC00 | c & 0x3FF;\n    }\n    str += String.fromCharCode(c);\n    i += bytesPerSequence;\n  }\n  return str;\n}\n\n/**\n * @param {Uint8Array} buf\n * @param {string} str\n * @param {number} pos\n */\nfunction writeUtf8(buf, str, pos) {\n  for (let i = 0, c, lead; i < str.length; i++) {\n    c = str.charCodeAt(i); // code point\n\n    if (c > 0xD7FF && c < 0xE000) {\n      if (lead) {\n        if (c < 0xDC00) {\n          buf[pos++] = 0xEF;\n          buf[pos++] = 0xBF;\n          buf[pos++] = 0xBD;\n          lead = c;\n          continue;\n        } else {\n          c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\n          lead = null;\n        }\n      } else {\n        if (c > 0xDBFF || i + 1 === str.length) {\n          buf[pos++] = 0xEF;\n          buf[pos++] = 0xBF;\n          buf[pos++] = 0xBD;\n        } else {\n          lead = c;\n        }\n        continue;\n      }\n    } else if (lead) {\n      buf[pos++] = 0xEF;\n      buf[pos++] = 0xBF;\n      buf[pos++] = 0xBD;\n      lead = null;\n    }\n    if (c < 0x80) {\n      buf[pos++] = c;\n    } else {\n      if (c < 0x800) {\n        buf[pos++] = c >> 0x6 | 0xC0;\n      } else {\n        if (c < 0x10000) {\n          buf[pos++] = c >> 0xC | 0xE0;\n        } else {\n          buf[pos++] = c >> 0x12 | 0xF0;\n          buf[pos++] = c >> 0xC & 0x3F | 0x80;\n        }\n        buf[pos++] = c >> 0x6 & 0x3F | 0x80;\n      }\n      buf[pos++] = c & 0x3F | 0x80;\n    }\n  }\n  return pos;\n}","map":{"version":3,"names":["SHIFT_LEFT_32","SHIFT_RIGHT_32","TEXT_DECODER_MIN_LENGTH","utf8TextDecoder","TextDecoder","PBF_VARINT","PBF_FIXED64","PBF_BYTES","PBF_FIXED32","Pbf","constructor","buf","Uint8Array","ArrayBuffer","isView","dataView","DataView","buffer","pos","type","length","readFields","readField","result","end","val","readVarint","tag","startPos","skip","readMessage","readFixed32","getUint32","readSFixed32","getInt32","readFixed64","readSFixed64","readFloat","getFloat32","readDouble","getFloat64","isSigned","b","readVarintRemainder","readVarint64","readSVarint","num","readBoolean","Boolean","readString","decode","subarray","readUtf8","readBytes","readPackedVarint","arr","readPackedEnd","push","readPackedSVarint","readPackedBoolean","readPackedFloat","readPackedDouble","readPackedFixed32","readPackedSFixed32","readPackedFixed64","readPackedSFixed64","Error","writeTag","writeVarint","realloc","min","set","finish","writeFixed32","setInt32","writeSFixed32","writeFixed64","Math","floor","writeSFixed64","writeBigVarint","writeSVarint","writeBoolean","writeString","str","String","writeUtf8","len","makeRoomForExtraLength","writeFloat","setFloat32","writeDouble","setFloat64","writeBytes","i","writeRawMessage","fn","obj","writeMessage","writePackedVarint","writePackedSVarint","writePackedBoolean","writePackedFloat","writePackedDouble","writePackedFixed32","writePackedSFixed32","writePackedFixed64","writePackedSFixed64","writeBytesField","writeFixed32Field","writeSFixed32Field","writeFixed64Field","writeSFixed64Field","writeVarintField","writeSVarintField","writeStringField","writeFloatField","writeDoubleField","writeBooleanField","l","s","p","h","toNum","low","high","pbf","writeBigVarintLow","writeBigVarintHigh","lsb","extraLen","log","LN2","b0","c","bytesPerSequence","b1","b2","b3","fromCharCode","lead","charCodeAt"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/pbf/index.js"],"sourcesContent":["\nconst SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nconst SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// Threshold chosen based on both benchmarking and knowledge about browser string\n// data structures (which currently switch structure types at 12 bytes or more)\nconst TEXT_DECODER_MIN_LENGTH = 12;\nconst utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8');\n\nconst PBF_VARINT  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum\nconst PBF_FIXED64 = 1; // 64-bit: double, fixed64, sfixed64\nconst PBF_BYTES   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields\nconst PBF_FIXED32 = 5; // 32-bit: float, fixed32, sfixed32\n\nexport default class Pbf {\n    /**\n     * @param {Uint8Array | ArrayBuffer} [buf]\n     */\n    constructor(buf = new Uint8Array(16)) {\n        this.buf = ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf);\n        this.dataView = new DataView(this.buf.buffer);\n        this.pos = 0;\n        this.type = 0;\n        this.length = this.buf.length;\n    }\n\n    // === READING =================================================================\n\n    /**\n     * @template T\n     * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n     * @param {T} result\n     * @param {number} [end]\n     */\n    readFields(readField, result, end = this.length) {\n        while (this.pos < end) {\n            const val = this.readVarint(),\n                tag = val >> 3,\n                startPos = this.pos;\n\n            this.type = val & 0x7;\n            readField(tag, result, this);\n\n            if (this.pos === startPos) this.skip(val);\n        }\n        return result;\n    }\n\n    /**\n     * @template T\n     * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n     * @param {T} result\n     */\n    readMessage(readField, result) {\n        return this.readFields(readField, result, this.readVarint() + this.pos);\n    }\n\n    readFixed32() {\n        const val = this.dataView.getUint32(this.pos, true);\n        this.pos += 4;\n        return val;\n    }\n\n    readSFixed32() {\n        const val = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return val;\n    }\n\n    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)\n\n    readFixed64() {\n        const val = this.dataView.getUint32(this.pos, true) + this.dataView.getUint32(this.pos + 4, true) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    }\n\n    readSFixed64() {\n        const val = this.dataView.getUint32(this.pos, true) + this.dataView.getInt32(this.pos + 4, true) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    }\n\n    readFloat() {\n        const val = this.dataView.getFloat32(this.pos, true);\n        this.pos += 4;\n        return val;\n    }\n\n    readDouble() {\n        const val = this.dataView.getFloat64(this.pos, true);\n        this.pos += 8;\n        return val;\n    }\n\n    /**\n     * @param {boolean} [isSigned]\n     */\n    readVarint(isSigned) {\n        const buf = this.buf;\n        let val, b;\n\n        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;\n        b = buf[this.pos];   val |= (b & 0x0f) << 28;\n\n        return readVarintRemainder(val, isSigned, this);\n    }\n\n    readVarint64() { // for compatibility with v2.0.1\n        return this.readVarint(true);\n    }\n\n    readSVarint() {\n        const num = this.readVarint();\n        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\n    }\n\n    readBoolean() {\n        return Boolean(this.readVarint());\n    }\n\n    readString() {\n        const end = this.readVarint() + this.pos;\n        const pos = this.pos;\n        this.pos = end;\n\n        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {\n            // longer strings are fast with the built-in browser TextDecoder API\n            return utf8TextDecoder.decode(this.buf.subarray(pos, end));\n        }\n        // short strings are fast with our custom implementation\n        return readUtf8(this.buf, pos, end);\n    }\n\n    readBytes() {\n        const end = this.readVarint() + this.pos,\n            buffer = this.buf.subarray(this.pos, end);\n        this.pos = end;\n        return buffer;\n    }\n\n    // verbose for performance reasons; doesn't affect gzipped size\n\n    /**\n     * @param {number[]} [arr]\n     * @param {boolean} [isSigned]\n     */\n    readPackedVarint(arr = [], isSigned) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readVarint(isSigned));\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedSVarint(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readSVarint());\n        return arr;\n    }\n    /** @param {boolean[]} [arr] */\n    readPackedBoolean(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readBoolean());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedFloat(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readFloat());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedDouble(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readDouble());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedFixed32(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readFixed32());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedSFixed32(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readSFixed32());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedFixed64(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readFixed64());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedSFixed64(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readSFixed64());\n        return arr;\n    }\n    readPackedEnd() {\n        return this.type === PBF_BYTES ? this.readVarint() + this.pos : this.pos + 1;\n    }\n\n    /** @param {number} val */\n    skip(val) {\n        const type = val & 0x7;\n        if (type === PBF_VARINT) while (this.buf[this.pos++] > 0x7f) {}\n        else if (type === PBF_BYTES) this.pos = this.readVarint() + this.pos;\n        else if (type === PBF_FIXED32) this.pos += 4;\n        else if (type === PBF_FIXED64) this.pos += 8;\n        else throw new Error(`Unimplemented type: ${type}`);\n    }\n\n    // === WRITING =================================================================\n\n    /**\n     * @param {number} tag\n     * @param {number} type\n     */\n    writeTag(tag, type) {\n        this.writeVarint((tag << 3) | type);\n    }\n\n    /** @param {number} min */\n    realloc(min) {\n        let length = this.length || 16;\n\n        while (length < this.pos + min) length *= 2;\n\n        if (length !== this.length) {\n            const buf = new Uint8Array(length);\n            buf.set(this.buf);\n            this.buf = buf;\n            this.dataView = new DataView(buf.buffer);\n            this.length = length;\n        }\n    }\n\n    finish() {\n        this.length = this.pos;\n        this.pos = 0;\n        return this.buf.subarray(0, this.length);\n    }\n\n    /** @param {number} val */\n    writeFixed32(val) {\n        this.realloc(4);\n        this.dataView.setInt32(this.pos, val, true);\n        this.pos += 4;\n    }\n\n    /** @param {number} val */\n    writeSFixed32(val) {\n        this.realloc(4);\n        this.dataView.setInt32(this.pos, val, true);\n        this.pos += 4;\n    }\n\n    /** @param {number} val */\n    writeFixed64(val) {\n        this.realloc(8);\n        this.dataView.setInt32(this.pos, val & -1, true);\n        this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n        this.pos += 8;\n    }\n\n    /** @param {number} val */\n    writeSFixed64(val) {\n        this.realloc(8);\n        this.dataView.setInt32(this.pos, val & -1, true);\n        this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n        this.pos += 8;\n    }\n\n    /** @param {number} val */\n    writeVarint(val) {\n        val = +val || 0;\n\n        if (val > 0xfffffff || val < 0) {\n            writeBigVarint(val, this);\n            return;\n        }\n\n        this.realloc(4);\n\n        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] =   (val >>> 7) & 0x7f;\n    }\n\n    /** @param {number} val */\n    writeSVarint(val) {\n        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);\n    }\n\n    /** @param {boolean} val */\n    writeBoolean(val) {\n        this.writeVarint(+val);\n    }\n\n    /** @param {string} str */\n    writeString(str) {\n        str = String(str);\n        this.realloc(str.length * 4);\n\n        this.pos++; // reserve 1 byte for short string length\n\n        const startPos = this.pos;\n        // write the string directly to the buffer and see how much was written\n        this.pos = writeUtf8(this.buf, str, this.pos);\n        const len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    }\n\n    /** @param {number} val */\n    writeFloat(val) {\n        this.realloc(4);\n        this.dataView.setFloat32(this.pos, val, true);\n        this.pos += 4;\n    }\n\n    /** @param {number} val */\n    writeDouble(val) {\n        this.realloc(8);\n        this.dataView.setFloat64(this.pos, val, true);\n        this.pos += 8;\n    }\n\n    /** @param {Uint8Array} buffer */\n    writeBytes(buffer) {\n        const len = buffer.length;\n        this.writeVarint(len);\n        this.realloc(len);\n        for (let i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];\n    }\n\n    /**\n     * @template T\n     * @param {(obj: T, pbf: Pbf) => void} fn\n     * @param {T} obj\n     */\n    writeRawMessage(fn, obj) {\n        this.pos++; // reserve 1 byte for short message length\n\n        // write the message directly to the buffer and see how much was written\n        const startPos = this.pos;\n        fn(obj, this);\n        const len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    }\n\n    /**\n     * @template T\n     * @param {number} tag\n     * @param {(obj: T, pbf: Pbf) => void} fn\n     * @param {T} obj\n     */\n    writeMessage(tag, fn, obj) {\n        this.writeTag(tag, PBF_BYTES);\n        this.writeRawMessage(fn, obj);\n    }\n\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedVarint(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedVarint, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedSVarint(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {boolean[]} arr\n     */\n    writePackedBoolean(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedFloat(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedFloat, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedDouble(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedDouble, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedFixed32(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedSFixed32(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedFixed64(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedSFixed64(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr);\n    }\n\n    /**\n     * @param {number} tag\n     * @param {Uint8Array} buffer\n     */\n    writeBytesField(tag, buffer) {\n        this.writeTag(tag, PBF_BYTES);\n        this.writeBytes(buffer);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeFixed32Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED32);\n        this.writeFixed32(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeSFixed32Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED32);\n        this.writeSFixed32(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeFixed64Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED64);\n        this.writeFixed64(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeSFixed64Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED64);\n        this.writeSFixed64(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeVarintField(tag, val) {\n        this.writeTag(tag, PBF_VARINT);\n        this.writeVarint(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeSVarintField(tag, val) {\n        this.writeTag(tag, PBF_VARINT);\n        this.writeSVarint(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {string} str\n     */\n    writeStringField(tag, str) {\n        this.writeTag(tag, PBF_BYTES);\n        this.writeString(str);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeFloatField(tag, val) {\n        this.writeTag(tag, PBF_FIXED32);\n        this.writeFloat(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeDoubleField(tag, val) {\n        this.writeTag(tag, PBF_FIXED64);\n        this.writeDouble(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {boolean} val\n     */\n    writeBooleanField(tag, val) {\n        this.writeVarintField(tag, +val);\n    }\n};\n\n/**\n * @param {number} l\n * @param {boolean | undefined} s\n * @param {Pbf} p\n */\nfunction readVarintRemainder(l, s, p) {\n    const buf = p.buf;\n    let h, b;\n\n    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);\n\n    throw new Error('Expected varint not more than 10 bytes');\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {boolean} [isSigned]\n */\nfunction toNum(low, high, isSigned) {\n    return isSigned ? high * 0x100000000 + (low >>> 0) : ((high >>> 0) * 0x100000000) + (low >>> 0);\n}\n\n/**\n * @param {number} val\n * @param {Pbf} pbf\n */\nfunction writeBigVarint(val, pbf) {\n    let low, high;\n\n    if (val >= 0) {\n        low  = (val % 0x100000000) | 0;\n        high = (val / 0x100000000) | 0;\n    } else {\n        low  = ~(-val % 0x100000000);\n        high = ~(-val / 0x100000000);\n\n        if (low ^ 0xffffffff) {\n            low = (low + 1) | 0;\n        } else {\n            low = 0;\n            high = (high + 1) | 0;\n        }\n    }\n\n    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {\n        throw new Error('Given varint doesn\\'t fit into 10 bytes');\n    }\n\n    pbf.realloc(10);\n\n    writeBigVarintLow(low, high, pbf);\n    writeBigVarintHigh(high, pbf);\n}\n\n/**\n * @param {number} high\n * @param {number} low\n * @param {Pbf} pbf\n */\nfunction writeBigVarintLow(low, high, pbf) {\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos]   = low & 0x7f;\n}\n\n/**\n * @param {number} high\n * @param {Pbf} pbf\n */\nfunction writeBigVarintHigh(high, pbf) {\n    const lsb = (high & 0x07) << 4;\n\n    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f;\n}\n\n/**\n * @param {number} startPos\n * @param {number} len\n * @param {Pbf} pbf\n */\nfunction makeRoomForExtraLength(startPos, len, pbf) {\n    const extraLen =\n        len <= 0x3fff ? 1 :\n        len <= 0x1fffff ? 2 :\n        len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));\n\n    // if 1 byte isn't enough for encoding message length, shift the data to the right\n    pbf.realloc(extraLen);\n    for (let i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];\n}\n\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedVarint(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSVarint(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFloat(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedDouble(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);\n}\n/**\n * @param {boolean[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedBoolean(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed32(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed32(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed64(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed64(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]);\n}\n\n// Buffer code below from https://github.com/feross/buffer, MIT-licensed\n\n/**\n * @param {Uint8Array} buf\n * @param {number} pos\n * @param {number} end\n */\nfunction readUtf8(buf, pos, end) {\n    let str = '';\n    let i = pos;\n\n    while (i < end) {\n        const b0 = buf[i];\n        let c = null; // codepoint\n        let bytesPerSequence =\n            b0 > 0xEF ? 4 :\n            b0 > 0xDF ? 3 :\n            b0 > 0xBF ? 2 : 1;\n\n        if (i + bytesPerSequence > end) break;\n\n        let b1, b2, b3;\n\n        if (bytesPerSequence === 1) {\n            if (b0 < 0x80) {\n                c = b0;\n            }\n        } else if (bytesPerSequence === 2) {\n            b1 = buf[i + 1];\n            if ((b1 & 0xC0) === 0x80) {\n                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);\n                if (c <= 0x7F) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 3) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);\n                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 4) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            b3 = buf[i + 3];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);\n                if (c <= 0xFFFF || c >= 0x110000) {\n                    c = null;\n                }\n            }\n        }\n\n        if (c === null) {\n            c = 0xFFFD;\n            bytesPerSequence = 1;\n\n        } else if (c > 0xFFFF) {\n            c -= 0x10000;\n            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);\n            c = 0xDC00 | c & 0x3FF;\n        }\n\n        str += String.fromCharCode(c);\n        i += bytesPerSequence;\n    }\n\n    return str;\n}\n\n/**\n * @param {Uint8Array} buf\n * @param {string} str\n * @param {number} pos\n */\nfunction writeUtf8(buf, str, pos) {\n    for (let i = 0, c, lead; i < str.length; i++) {\n        c = str.charCodeAt(i); // code point\n\n        if (c > 0xD7FF && c < 0xE000) {\n            if (lead) {\n                if (c < 0xDC00) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                    lead = c;\n                    continue;\n                } else {\n                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\n                    lead = null;\n                }\n            } else {\n                if (c > 0xDBFF || (i + 1 === str.length)) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                } else {\n                    lead = c;\n                }\n                continue;\n            }\n        } else if (lead) {\n            buf[pos++] = 0xEF;\n            buf[pos++] = 0xBF;\n            buf[pos++] = 0xBD;\n            lead = null;\n        }\n\n        if (c < 0x80) {\n            buf[pos++] = c;\n        } else {\n            if (c < 0x800) {\n                buf[pos++] = c >> 0x6 | 0xC0;\n            } else {\n                if (c < 0x10000) {\n                    buf[pos++] = c >> 0xC | 0xE0;\n                } else {\n                    buf[pos++] = c >> 0x12 | 0xF0;\n                    buf[pos++] = c >> 0xC & 0x3F | 0x80;\n                }\n                buf[pos++] = c >> 0x6 & 0x3F | 0x80;\n            }\n            buf[pos++] = c & 0x3F | 0x80;\n        }\n    }\n    return pos;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}