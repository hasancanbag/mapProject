{"ast":null,"code":"/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport { getUid } from '../util.js';\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n\n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n\n  uniform vec2 u_screenSize;\n\n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform sampler2D u_image;\n  uniform float u_opacity;\n\n  varying vec2 v_texCoord;\n\n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     */\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    /**\n     * @private\n     */\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.renderTargetTexture_ = gl.createTexture();\n\n    /**\n     * @type {import('../size.js').Size|null}\n     * @private\n     */\n    this.renderTargetTextureSize_ = null;\n\n    /**\n     * @private\n     */\n    this.frameBuffer_ = gl.createFramebuffer();\n    /**\n     * @private\n     */\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    /**\n     * @private\n     */\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    /**\n     * @private\n     */\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n\n    /**\n     * @private\n     */\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    /**\n     * @private\n     */\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    /**\n     * @private\n     */\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    /**\n     * @private\n     */\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(name => {\n      this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(this.renderTargetProgram_, name)\n      });\n    });\n  }\n  getRenderTargetTexture() {\n    return this.renderTargetTexture_;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureSize[0], textureSize[1]);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer_);\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n    this.applyUniforms(frameState);\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        if (value instanceof ImageData) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n        } else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\nexport default WebGLPostProcessingPass;","map":{"version":3,"names":["getUid","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","constructor","options","gl_","webGlContext","gl","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","depthBuffer_","createRenderbuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","Object","keys","forEach","name","push","value","location","getRenderTargetTexture","getGL","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","bindRenderbuffer","RENDERBUFFER","getDepthBuffer","viewport","level","internalFormat","RGBA","border","format","type","UNSIGNED_BYTE","data","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","apply","nextPass","preCompose","postCompose","size","activeTexture","TEXTURE0","canvasId","canvas","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","DEPTH_TEST","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","width","height","Uint8Array","Array","isArray","length","uniform3f","uniform4f"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/webgl/PostProcessingPass.js"],"sourcesContent":["/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n\n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n\n  uniform vec2 u_screenSize;\n\n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform sampler2D u_image;\n  uniform float u_opacity;\n\n  varying vec2 v_texCoord;\n\n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     */\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    /**\n     * @private\n     */\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.renderTargetTexture_ = gl.createTexture();\n\n    /**\n     * @type {import('../size.js').Size|null}\n     * @private\n     */\n    this.renderTargetTextureSize_ = null;\n\n    /**\n     * @private\n     */\n    this.frameBuffer_ = gl.createFramebuffer();\n    /**\n     * @private\n     */\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER,\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER,\n    );\n    gl.compileShader(fragmentShader);\n    /**\n     * @private\n     */\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    /**\n     * @private\n     */\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW,\n    );\n\n    /**\n     * @private\n     */\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image',\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach((name) => {\n        this.uniforms_.push({\n          value: options.uniforms[name],\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\n        });\n      });\n  }\n\n  getRenderTargetTexture() {\n    return this.renderTargetTexture_;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data,\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0,\n      );\n\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        textureSize[0],\n        textureSize[1],\n      );\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        this.depthBuffer_,\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null,\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0,\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data),\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,YAAY;AAEjC,MAAMC,qBAAqB,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,uBAAuB,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,CAAC;EAC5B;AACF;AACA;EACEC,WAAWA,CAACC,OAAO,EAAE;IACnB;AACJ;AACA;IACI,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACE,YAAY;IAC/B,MAAMC,EAAE,GAAG,IAAI,CAACF,GAAG;;IAEnB;AACJ;AACA;IACI,IAAI,CAACG,WAAW,GAAGJ,OAAO,CAACK,UAAU,IAAI,CAAC;;IAE1C;AACJ;AACA;AACA;IACI,IAAI,CAACC,oBAAoB,GAAGH,EAAE,CAACI,aAAa,CAAC,CAAC;;IAE9C;AACJ;AACA;AACA;IACI,IAAI,CAACC,wBAAwB,GAAG,IAAI;;IAEpC;AACJ;AACA;IACI,IAAI,CAACC,YAAY,GAAGN,EAAE,CAACO,iBAAiB,CAAC,CAAC;IAC1C;AACJ;AACA;IACI,IAAI,CAACC,YAAY,GAAGR,EAAE,CAACS,kBAAkB,CAAC,CAAC;;IAE3C;IACA;IACA,MAAMC,YAAY,GAAGV,EAAE,CAACW,YAAY,CAACX,EAAE,CAACY,aAAa,CAAC;IACtDZ,EAAE,CAACa,YAAY,CACbH,YAAY,EACZb,OAAO,CAACa,YAAY,IAAIjB,qBAC1B,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}