{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\n\nimport Disposable from '../Disposable.js';\nimport { assert } from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Entry|null} newer Newer.\n * @property {Entry|null} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\n   * the entry will be disposed.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      const entry = this.pop();\n      if (entry instanceof Disposable) {\n        entry.dispose();\n      }\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 'Tried to get a value for a key that does not exist in the cache');\n    if (entry === this.newest_) {\n      return entry.value_;\n    }\n    if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 'Tried to get a value for a key that does not exist in the cache');\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */entry.older;\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */entry.newer;\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T|undefined} Value.\n   */\n  peek(key) {\n    return this.entries_[key]?.value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */entry.newer;\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_), 'Tried to set a value for a key that is used already');\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\nexport default LRUCache;","map":{"version":3,"names":["Disposable","assert","LRUCache","constructor","highWaterMark","undefined","count_","entries_","oldest_","newest_","canExpireCache","getCount","expireCache","keep","entry","pop","dispose","clear","containsKey","key","hasOwnProperty","forEach","f","value_","key_","newer","get","options","older","remove","getKeys","keys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","peek","replace","value","set","setSize","size"],"sources":["C:/Users/hasan/webproj/openlayers-project/node_modules/ol/structs/LRUCache.js"],"sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport Disposable from '../Disposable.js';\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Entry|null} newer Newer.\n * @property {Entry|null} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\n   * the entry will be disposed.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      const entry = this.pop();\n      if (entry instanceof Disposable) {\n        entry.dispose();\n      }\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      return entry.value_;\n    }\n    if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T|undefined} Value.\n   */\n  peek(key) {\n    return this.entries_[key]?.value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(\n      !(key in this.entries_),\n      'Tried to set a value for a key that is used already',\n    );\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}