{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nimport { setisAdmin } from \"../store/adminSlice\";\nimport { clearWktData, resetHasFetched } from \"../store/wktSlice\";\nimport { setError } from \"../store/errorSlice\";\nconst API_URL = \"https://localhost:7014/api/Auth\";\nexport const login = async (username, password, dispatch) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok || !data.result) {\n      dispatch(setError(data.message || 'Error!!'));\n      return data;\n    }\n    if (data.value) {\n      const decodedToken = jwtDecode(data.value);\n      const expirationDate = new Date(decodedToken.exp * 1000);\n      const ROLE_KEY = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\";\n      const USER_KEY = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\";\n      const role = decodedToken[ROLE_KEY];\n      const userId = decodedToken[USER_KEY];\n      if (role === \"Admin\") {\n        dispatch(setisAdmin(true));\n      }\n      localStorage.setItem('token', data.value);\n      localStorage.setItem('userId', userId);\n      localStorage.setItem('tokenExpiration', expirationDate);\n    }\n    return data;\n  } catch (error) {\n    dispatch(setError('Giriş yapılamadı, lütfen tekrar deneyin.'));\n  }\n};\nexport const signup = async (username, password, email, role) => {\n  const response = await fetch(`${API_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password,\n      email,\n      role\n    })\n  });\n  const data = await response.json();\n  if (!response.ok || !data.result) {\n    throw new Error(data.message || 'Signup failed');\n  }\n  return data.result;\n};\nexport const logout = dispatch => {\n  dispatch(setisAdmin(false));\n  dispatch(clearWktData());\n  dispatch(resetHasFetched(false));\n  localStorage.removeItem('token');\n  localStorage.removeItem('tokenExpiration');\n  localStorage.removeItem('userId');\n};\nexport const getToken = () => {\n  const token = localStorage.getItem('token');\n  const expiration = localStorage.getItem('tokenExpiration');\n  if (token && expiration) {\n    const now = new Date().getTime();\n    if (now > expiration) {\n      logout();\n      return null;\n    }\n  }\n  return token;\n};","map":{"version":3,"names":["jwtDecode","setisAdmin","clearWktData","resetHasFetched","setError","API_URL","login","username","password","dispatch","response","fetch","method","headers","body","JSON","stringify","data","json","ok","result","message","value","decodedToken","expirationDate","Date","exp","ROLE_KEY","USER_KEY","role","userId","localStorage","setItem","error","signup","email","Error","logout","removeItem","getToken","token","getItem","expiration","now","getTime"],"sources":["C:/Users/hasan/webproj/openlayers-project/src/services/authService.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\r\nimport { setisAdmin } from \"../store/adminSlice\";\r\nimport { clearWktData, resetHasFetched } from \"../store/wktSlice\";\r\nimport { setError } from \"../store/errorSlice\";\r\nconst API_URL = \"https://localhost:7014/api/Auth\";\r\n\r\nexport const login = async (username, password, dispatch) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username, password })\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok || !data.result) {\r\n      dispatch(setError(data.message || 'Error!!'));\r\n      return data;\r\n    }\r\n\r\n    if (data.value) {\r\n      const decodedToken = jwtDecode(data.value);\r\n      const expirationDate = new Date(decodedToken.exp * 1000);\r\n      const ROLE_KEY = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\";\r\n      const USER_KEY = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\";\r\n      const role = decodedToken[ROLE_KEY];\r\n      const userId = decodedToken[USER_KEY];\r\n\r\n      if (role === \"Admin\") {\r\n        dispatch(setisAdmin(true));\r\n      }\r\n\r\n      localStorage.setItem('token', data.value);\r\n      localStorage.setItem('userId', userId);\r\n      localStorage.setItem('tokenExpiration', expirationDate);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    dispatch(setError('Giriş yapılamadı, lütfen tekrar deneyin.'));\r\n  }\r\n};\r\n\r\n\r\nexport const signup = async (username, password, email, role) => {\r\n  const response = await fetch(`${API_URL}/register`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ username, password, email, role }),\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok || !data.result) {\r\n    throw new Error(data.message || 'Signup failed');\r\n  }\r\n\r\n  return data.result;\r\n};\r\n\r\nexport const logout = (dispatch) => {\r\n  dispatch(setisAdmin(false));\r\n  dispatch(clearWktData());\r\n  dispatch(resetHasFetched(false));\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('tokenExpiration');\r\n  localStorage.removeItem('userId');\r\n};\r\n\r\nexport const getToken = () => {\r\n  const token = localStorage.getItem('token');\r\n  const expiration = localStorage.getItem('tokenExpiration');\r\n\r\n  if (token && expiration) {\r\n    const now = new Date().getTime();\r\n    if (now > expiration) {\r\n      logout(); \r\n      return null;\r\n    }\r\n  }\r\n\r\n  return token;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}